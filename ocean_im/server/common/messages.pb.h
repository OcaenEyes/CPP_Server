// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace oceanim {
class GroupId;
struct GroupIdDefaultTypeInternal;
extern GroupIdDefaultTypeInternal _GroupId_default_instance_;
class GroupInfo;
struct GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupInfos;
struct GroupInfosDefaultTypeInternal;
extern GroupInfosDefaultTypeInternal _GroupInfos_default_instance_;
class Msg;
struct MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class MsgId;
struct MsgIdDefaultTypeInternal;
extern MsgIdDefaultTypeInternal _MsgId_default_instance_;
class MsgIdRange;
struct MsgIdRangeDefaultTypeInternal;
extern MsgIdRangeDefaultTypeInternal _MsgIdRange_default_instance_;
class MsgReply;
struct MsgReplyDefaultTypeInternal;
extern MsgReplyDefaultTypeInternal _MsgReply_default_instance_;
class Msgs;
struct MsgsDefaultTypeInternal;
extern MsgsDefaultTypeInternal _Msgs_default_instance_;
class NewGroupMsg;
struct NewGroupMsgDefaultTypeInternal;
extern NewGroupMsgDefaultTypeInternal _NewGroupMsg_default_instance_;
class NewMsg;
struct NewMsgDefaultTypeInternal;
extern NewMsgDefaultTypeInternal _NewMsg_default_instance_;
class NewPrivateMsg;
struct NewPrivateMsgDefaultTypeInternal;
extern NewPrivateMsgDefaultTypeInternal _NewPrivateMsg_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Pong;
struct PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class SigninData;
struct SigninDataDefaultTypeInternal;
extern SigninDataDefaultTypeInternal _SigninData_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class UserAndMsgId;
struct UserAndMsgIdDefaultTypeInternal;
extern UserAndMsgIdDefaultTypeInternal _UserAndMsgId_default_instance_;
class UserId;
struct UserIdDefaultTypeInternal;
extern UserIdDefaultTypeInternal _UserId_default_instance_;
class UserIds;
struct UserIdsDefaultTypeInternal;
extern UserIdsDefaultTypeInternal _UserIds_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserInfos;
struct UserInfosDefaultTypeInternal;
extern UserInfosDefaultTypeInternal _UserInfos_default_instance_;
class UserLastSendData;
struct UserLastSendDataDefaultTypeInternal;
extern UserLastSendDataDefaultTypeInternal _UserLastSendData_default_instance_;
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
template<> ::oceanim::GroupId* Arena::CreateMaybeMessage<::oceanim::GroupId>(Arena*);
template<> ::oceanim::GroupInfo* Arena::CreateMaybeMessage<::oceanim::GroupInfo>(Arena*);
template<> ::oceanim::GroupInfos* Arena::CreateMaybeMessage<::oceanim::GroupInfos>(Arena*);
template<> ::oceanim::Msg* Arena::CreateMaybeMessage<::oceanim::Msg>(Arena*);
template<> ::oceanim::MsgId* Arena::CreateMaybeMessage<::oceanim::MsgId>(Arena*);
template<> ::oceanim::MsgIdRange* Arena::CreateMaybeMessage<::oceanim::MsgIdRange>(Arena*);
template<> ::oceanim::MsgReply* Arena::CreateMaybeMessage<::oceanim::MsgReply>(Arena*);
template<> ::oceanim::Msgs* Arena::CreateMaybeMessage<::oceanim::Msgs>(Arena*);
template<> ::oceanim::NewGroupMsg* Arena::CreateMaybeMessage<::oceanim::NewGroupMsg>(Arena*);
template<> ::oceanim::NewMsg* Arena::CreateMaybeMessage<::oceanim::NewMsg>(Arena*);
template<> ::oceanim::NewPrivateMsg* Arena::CreateMaybeMessage<::oceanim::NewPrivateMsg>(Arena*);
template<> ::oceanim::Ping* Arena::CreateMaybeMessage<::oceanim::Ping>(Arena*);
template<> ::oceanim::Pong* Arena::CreateMaybeMessage<::oceanim::Pong>(Arena*);
template<> ::oceanim::Reply* Arena::CreateMaybeMessage<::oceanim::Reply>(Arena*);
template<> ::oceanim::SigninData* Arena::CreateMaybeMessage<::oceanim::SigninData>(Arena*);
template<> ::oceanim::Timestamp* Arena::CreateMaybeMessage<::oceanim::Timestamp>(Arena*);
template<> ::oceanim::UserAndMsgId* Arena::CreateMaybeMessage<::oceanim::UserAndMsgId>(Arena*);
template<> ::oceanim::UserId* Arena::CreateMaybeMessage<::oceanim::UserId>(Arena*);
template<> ::oceanim::UserIds* Arena::CreateMaybeMessage<::oceanim::UserIds>(Arena*);
template<> ::oceanim::UserInfo* Arena::CreateMaybeMessage<::oceanim::UserInfo>(Arena*);
template<> ::oceanim::UserInfos* Arena::CreateMaybeMessage<::oceanim::UserInfos>(Arena*);
template<> ::oceanim::UserLastSendData* Arena::CreateMaybeMessage<::oceanim::UserLastSendData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oceanim {

enum MsgType : int {
  PRIVATE = 0,
  GROUP = 1,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = PRIVATE;
constexpr MsgType MsgType_MAX = GROUP;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum DataType : int {
  NONE = 0,
  PRIVATE_MESSAGE = 1,
  GROUP_MESSAGE = 2,
  ADDUSER = 3,
  REMOVEUSER = 4,
  ADDGROUP = 5,
  REMOVEGROUP = 6,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = NONE;
constexpr DataType DataType_MAX = REMOVEGROUP;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class SigninData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.SigninData) */ {
 public:
  inline SigninData() : SigninData(nullptr) {}
  ~SigninData() override;
  explicit constexpr SigninData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigninData(const SigninData& from);
  SigninData(SigninData&& from) noexcept
    : SigninData() {
    *this = ::std::move(from);
  }

  inline SigninData& operator=(const SigninData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigninData& operator=(SigninData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigninData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigninData* internal_default_instance() {
    return reinterpret_cast<const SigninData*>(
               &_SigninData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SigninData& a, SigninData& b) {
    a.Swap(&b);
  }
  inline void Swap(SigninData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigninData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigninData* New() const final {
    return new SigninData();
  }

  SigninData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigninData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigninData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SigninData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigninData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.SigninData";
  }
  protected:
  explicit SigninData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kAccessAddrFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kClientTimestampFieldNumber = 3,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string access_addr = 4;
  void clear_access_addr();
  const std::string& access_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_access_addr();
  void set_allocated_access_addr(std::string* access_addr);
  private:
  const std::string& _internal_access_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_addr(const std::string& value);
  std::string* _internal_mutable_access_addr();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 client_timestamp = 3;
  void clear_client_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 client_timestamp() const;
  void set_client_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_timestamp() const;
  void _internal_set_client_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.SigninData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserLastSendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserLastSendData) */ {
 public:
  inline UserLastSendData() : UserLastSendData(nullptr) {}
  ~UserLastSendData() override;
  explicit constexpr UserLastSendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLastSendData(const UserLastSendData& from);
  UserLastSendData(UserLastSendData&& from) noexcept
    : UserLastSendData() {
    *this = ::std::move(from);
  }

  inline UserLastSendData& operator=(const UserLastSendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLastSendData& operator=(UserLastSendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLastSendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLastSendData* internal_default_instance() {
    return reinterpret_cast<const UserLastSendData*>(
               &_UserLastSendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLastSendData& a, UserLastSendData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLastSendData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLastSendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLastSendData* New() const final {
    return new UserLastSendData();
  }

  UserLastSendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLastSendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLastSendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserLastSendData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLastSendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserLastSendData";
  }
  protected:
  explicit UserLastSendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kClientTimeFieldNumber = 3,
    kMsgTimeFieldNumber = 4,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 client_time = 3;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int32 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_time = 4;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserLastSendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return new Timestamp();
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timestamp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int32 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NewMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.NewMsg) */ {
 public:
  inline NewMsg() : NewMsg(nullptr) {}
  ~NewMsg() override;
  explicit constexpr NewMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewMsg(const NewMsg& from);
  NewMsg(NewMsg&& from) noexcept
    : NewMsg() {
    *this = ::std::move(from);
  }

  inline NewMsg& operator=(const NewMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMsg& operator=(NewMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewMsg* internal_default_instance() {
    return reinterpret_cast<const NewMsg*>(
               &_NewMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewMsg& a, NewMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NewMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewMsg* New() const final {
    return new NewMsg();
  }

  NewMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.NewMsg";
  }
  protected:
  explicit NewMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kPeerIdFieldNumber = 2,
    kMsgTypeFieldNumber = 4,
    kClientTimeFieldNumber = 6,
    kMsgTimeFieldNumber = 7,
  };
  // string message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 peer_id = 2;
  void clear_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int64 peer_id() const;
  void set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peer_id() const;
  void _internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .oceanim.MsgType msg_type = 4;
  void clear_msg_type();
  ::oceanim::MsgType msg_type() const;
  void set_msg_type(::oceanim::MsgType value);
  private:
  ::oceanim::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::oceanim::MsgType value);
  public:

  // int32 client_time = 6;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int32 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_time = 7;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.NewMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 peer_id_;
  int msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MsgId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgId) */ {
 public:
  inline MsgId() : MsgId(nullptr) {}
  ~MsgId() override;
  explicit constexpr MsgId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgId(const MsgId& from);
  MsgId(MsgId&& from) noexcept
    : MsgId() {
    *this = ::std::move(from);
  }

  inline MsgId& operator=(const MsgId& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgId& operator=(MsgId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgId& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgId* internal_default_instance() {
    return reinterpret_cast<const MsgId*>(
               &_MsgId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgId& a, MsgId& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgId* New() const final {
    return new MsgId();
  }

  MsgId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgId";
  }
  protected:
  explicit MsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
  };
  // int64 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.MsgId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserId) */ {
 public:
  inline UserId() : UserId(nullptr) {}
  ~UserId() override;
  explicit constexpr UserId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserId(const UserId& from);
  UserId(UserId&& from) noexcept
    : UserId() {
    *this = ::std::move(from);
  }

  inline UserId& operator=(const UserId& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserId& operator=(UserId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserId& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserId* internal_default_instance() {
    return reinterpret_cast<const UserId*>(
               &_UserId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserId& a, UserId& b) {
    a.Swap(&b);
  }
  inline void Swap(UserId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserId* New() const final {
    return new UserId();
  }

  UserId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserId";
  }
  protected:
  explicit UserId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserIds) */ {
 public:
  inline UserIds() : UserIds(nullptr) {}
  ~UserIds() override;
  explicit constexpr UserIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIds(const UserIds& from);
  UserIds(UserIds&& from) noexcept
    : UserIds() {
    *this = ::std::move(from);
  }

  inline UserIds& operator=(const UserIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIds& operator=(UserIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIds* internal_default_instance() {
    return reinterpret_cast<const UserIds*>(
               &_UserIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserIds& a, UserIds& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserIds* New() const final {
    return new UserIds();
  }

  UserIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserIds";
  }
  protected:
  explicit UserIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated int64 user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_user_ids() const;
  void _internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_user_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 user_ids(int index) const;
  void set_user_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_user_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_user_ids();

  // @@protoc_insertion_point(class_scope:oceanim.UserIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > user_ids_;
  mutable std::atomic<int> _user_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit constexpr UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return new UserInfo();
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserInfos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserInfos) */ {
 public:
  inline UserInfos() : UserInfos(nullptr) {}
  ~UserInfos() override;
  explicit constexpr UserInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfos(const UserInfos& from);
  UserInfos(UserInfos&& from) noexcept
    : UserInfos() {
    *this = ::std::move(from);
  }

  inline UserInfos& operator=(const UserInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfos& operator=(UserInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfos* internal_default_instance() {
    return reinterpret_cast<const UserInfos*>(
               &_UserInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserInfos& a, UserInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfos* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfos* New() const final {
    return new UserInfos();
  }

  UserInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserInfos";
  }
  protected:
  explicit UserInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfosFieldNumber = 1,
  };
  // repeated .oceanim.UserInfo user_infos = 1;
  int user_infos_size() const;
  private:
  int _internal_user_infos_size() const;
  public:
  void clear_user_infos();
  ::oceanim::UserInfo* mutable_user_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserInfo >*
      mutable_user_infos();
  private:
  const ::oceanim::UserInfo& _internal_user_infos(int index) const;
  ::oceanim::UserInfo* _internal_add_user_infos();
  public:
  const ::oceanim::UserInfo& user_infos(int index) const;
  ::oceanim::UserInfo* add_user_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserInfo >&
      user_infos() const;

  // @@protoc_insertion_point(class_scope:oceanim.UserInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserInfo > user_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GroupId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.GroupId) */ {
 public:
  inline GroupId() : GroupId(nullptr) {}
  ~GroupId() override;
  explicit constexpr GroupId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupId(const GroupId& from);
  GroupId(GroupId&& from) noexcept
    : GroupId() {
    *this = ::std::move(from);
  }

  inline GroupId& operator=(const GroupId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupId& operator=(GroupId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupId& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupId* internal_default_instance() {
    return reinterpret_cast<const GroupId*>(
               &_GroupId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupId& a, GroupId& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupId* New() const final {
    return new GroupId();
  }

  GroupId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.GroupId";
  }
  protected:
  explicit GroupId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.GroupId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {}
  ~GroupInfo() override;
  explicit constexpr GroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return new GroupInfo();
  }

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GroupInfos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.GroupInfos) */ {
 public:
  inline GroupInfos() : GroupInfos(nullptr) {}
  ~GroupInfos() override;
  explicit constexpr GroupInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfos(const GroupInfos& from);
  GroupInfos(GroupInfos&& from) noexcept
    : GroupInfos() {
    *this = ::std::move(from);
  }

  inline GroupInfos& operator=(const GroupInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfos& operator=(GroupInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfos* internal_default_instance() {
    return reinterpret_cast<const GroupInfos*>(
               &_GroupInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupInfos& a, GroupInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfos* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfos* New() const final {
    return new GroupInfos();
  }

  GroupInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupInfos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.GroupInfos";
  }
  protected:
  explicit GroupInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupInfosFieldNumber = 1,
  };
  // repeated .oceanim.GroupInfo group_infos = 1;
  int group_infos_size() const;
  private:
  int _internal_group_infos_size() const;
  public:
  void clear_group_infos();
  ::oceanim::GroupInfo* mutable_group_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::GroupInfo >*
      mutable_group_infos();
  private:
  const ::oceanim::GroupInfo& _internal_group_infos(int index) const;
  ::oceanim::GroupInfo* _internal_add_group_infos();
  public:
  const ::oceanim::GroupInfo& group_infos(int index) const;
  ::oceanim::GroupInfo* add_group_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::GroupInfo >&
      group_infos() const;

  // @@protoc_insertion_point(class_scope:oceanim.GroupInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::GroupInfo > group_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserAndMsgId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserAndMsgId) */ {
 public:
  inline UserAndMsgId() : UserAndMsgId(nullptr) {}
  ~UserAndMsgId() override;
  explicit constexpr UserAndMsgId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAndMsgId(const UserAndMsgId& from);
  UserAndMsgId(UserAndMsgId&& from) noexcept
    : UserAndMsgId() {
    *this = ::std::move(from);
  }

  inline UserAndMsgId& operator=(const UserAndMsgId& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAndMsgId& operator=(UserAndMsgId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAndMsgId& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAndMsgId* internal_default_instance() {
    return reinterpret_cast<const UserAndMsgId*>(
               &_UserAndMsgId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserAndMsgId& a, UserAndMsgId& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAndMsgId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAndMsgId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAndMsgId* New() const final {
    return new UserAndMsgId();
  }

  UserAndMsgId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAndMsgId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserAndMsgId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserAndMsgId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAndMsgId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserAndMsgId";
  }
  protected:
  explicit UserAndMsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserAndMsgId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NewPrivateMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.NewPrivateMsg) */ {
 public:
  inline NewPrivateMsg() : NewPrivateMsg(nullptr) {}
  ~NewPrivateMsg() override;
  explicit constexpr NewPrivateMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPrivateMsg(const NewPrivateMsg& from);
  NewPrivateMsg(NewPrivateMsg&& from) noexcept
    : NewPrivateMsg() {
    *this = ::std::move(from);
  }

  inline NewPrivateMsg& operator=(const NewPrivateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPrivateMsg& operator=(NewPrivateMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewPrivateMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPrivateMsg* internal_default_instance() {
    return reinterpret_cast<const NewPrivateMsg*>(
               &_NewPrivateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NewPrivateMsg& a, NewPrivateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPrivateMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPrivateMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPrivateMsg* New() const final {
    return new NewPrivateMsg();
  }

  NewPrivateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPrivateMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewPrivateMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewPrivateMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPrivateMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.NewPrivateMsg";
  }
  protected:
  explicit NewPrivateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 6,
    kSenderFieldNumber = 1,
    kSenderMsgIdFieldNumber = 2,
    kReceiverFieldNumber = 3,
    kReceiverMsgIdFieldNumber = 4,
    kMsgTimeFieldNumber = 7,
    kClientTimeFieldNumber = 8,
  };
  // string message = 6;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 sender = 1;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::int64 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sender_msg_id = 2;
  void clear_sender_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 sender_msg_id() const;
  void set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender_msg_id() const;
  void _internal_set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 receiver = 3;
  void clear_receiver();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver() const;
  void set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver() const;
  void _internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 receiver_msg_id = 4;
  void clear_receiver_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_msg_id() const;
  void set_receiver_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver_msg_id() const;
  void _internal_set_receiver_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_time = 7;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_time = 8;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int32 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.NewPrivateMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NewGroupMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.NewGroupMsg) */ {
 public:
  inline NewGroupMsg() : NewGroupMsg(nullptr) {}
  ~NewGroupMsg() override;
  explicit constexpr NewGroupMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewGroupMsg(const NewGroupMsg& from);
  NewGroupMsg(NewGroupMsg&& from) noexcept
    : NewGroupMsg() {
    *this = ::std::move(from);
  }

  inline NewGroupMsg& operator=(const NewGroupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGroupMsg& operator=(NewGroupMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewGroupMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGroupMsg* internal_default_instance() {
    return reinterpret_cast<const NewGroupMsg*>(
               &_NewGroupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NewGroupMsg& a, NewGroupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGroupMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGroupMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewGroupMsg* New() const final {
    return new NewGroupMsg();
  }

  NewGroupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewGroupMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewGroupMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewGroupMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGroupMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.NewGroupMsg";
  }
  protected:
  explicit NewGroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAndMsgidsFieldNumber = 2,
    kMessageFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kSenderUserIdFieldNumber = 3,
    kSenderMsgIdFieldNumber = 4,
    kMsgTimeFieldNumber = 6,
  };
  // repeated .oceanim.UserAndMsgId user_and_msgids = 2;
  int user_and_msgids_size() const;
  private:
  int _internal_user_and_msgids_size() const;
  public:
  void clear_user_and_msgids();
  ::oceanim::UserAndMsgId* mutable_user_and_msgids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndMsgId >*
      mutable_user_and_msgids();
  private:
  const ::oceanim::UserAndMsgId& _internal_user_and_msgids(int index) const;
  ::oceanim::UserAndMsgId* _internal_add_user_and_msgids();
  public:
  const ::oceanim::UserAndMsgId& user_and_msgids(int index) const;
  ::oceanim::UserAndMsgId* add_user_and_msgids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndMsgId >&
      user_and_msgids() const;

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sender_user_id = 3;
  void clear_sender_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 sender_user_id() const;
  void set_sender_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender_user_id() const;
  void _internal_set_sender_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sender_msg_id = 4;
  void clear_sender_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 sender_msg_id() const;
  void set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender_msg_id() const;
  void _internal_set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_time = 6;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.NewGroupMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndMsgId > user_and_msgids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  ~Msg() override;
  explicit constexpr Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return new Msg();
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
    kSenderFieldNumber = 3,
    kReceiverFieldNumber = 4,
    kGroupIdFieldNumber = 6,
    kClientTimeFieldNumber = 8,
    kMsgTimeFieldNumber = 9,
  };
  // string message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sender = 3;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::int64 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 receiver = 4;
  void clear_receiver();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver() const;
  void set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver() const;
  void _internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 6;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 client_time = 8;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::int32 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_time = 9;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Msgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Msgs) */ {
 public:
  inline Msgs() : Msgs(nullptr) {}
  ~Msgs() override;
  explicit constexpr Msgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msgs(const Msgs& from);
  Msgs(Msgs&& from) noexcept
    : Msgs() {
    *this = ::std::move(from);
  }

  inline Msgs& operator=(const Msgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msgs& operator=(Msgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msgs* internal_default_instance() {
    return reinterpret_cast<const Msgs*>(
               &_Msgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msgs& a, Msgs& b) {
    a.Swap(&b);
  }
  inline void Swap(Msgs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msgs* New() const final {
    return new Msgs();
  }

  Msgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Msgs";
  }
  protected:
  explicit Msgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .oceanim.Msg msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::oceanim::Msg* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Msg >*
      mutable_msgs();
  private:
  const ::oceanim::Msg& _internal_msgs(int index) const;
  ::oceanim::Msg* _internal_add_msgs();
  public:
  const ::oceanim::Msg& msgs(int index) const;
  ::oceanim::Msg* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Msg >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:oceanim.Msgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Msg > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MsgReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgReply) */ {
 public:
  inline MsgReply() : MsgReply(nullptr) {}
  ~MsgReply() override;
  explicit constexpr MsgReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgReply(const MsgReply& from);
  MsgReply(MsgReply&& from) noexcept
    : MsgReply() {
    *this = ::std::move(from);
  }

  inline MsgReply& operator=(const MsgReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgReply& operator=(MsgReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgReply* internal_default_instance() {
    return reinterpret_cast<const MsgReply*>(
               &_MsgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MsgReply& a, MsgReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgReply* New() const final {
    return new MsgReply();
  }

  MsgReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgReply";
  }
  protected:
  explicit MsgReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 3,
    kLastMsgIdFieldNumber = 4,
    kMsgTimeFieldNumber = 2,
  };
  // int64 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_msg_id = 4;
  void clear_last_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id() const;
  void set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_msg_id() const;
  void _internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_time = 2;
  void clear_msg_time();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time() const;
  void set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_time() const;
  void _internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.MsgReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MsgIdRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgIdRange) */ {
 public:
  inline MsgIdRange() : MsgIdRange(nullptr) {}
  ~MsgIdRange() override;
  explicit constexpr MsgIdRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIdRange(const MsgIdRange& from);
  MsgIdRange(MsgIdRange&& from) noexcept
    : MsgIdRange() {
    *this = ::std::move(from);
  }

  inline MsgIdRange& operator=(const MsgIdRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIdRange& operator=(MsgIdRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIdRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIdRange* internal_default_instance() {
    return reinterpret_cast<const MsgIdRange*>(
               &_MsgIdRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MsgIdRange& a, MsgIdRange& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIdRange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIdRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgIdRange* New() const final {
    return new MsgIdRange();
  }

  MsgIdRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgIdRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIdRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgIdRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIdRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgIdRange";
  }
  protected:
  explicit MsgIdRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStartMsgIdFieldNumber = 2,
    kEndMsgIdFieldNumber = 3,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_msg_id = 2;
  void clear_start_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id() const;
  void set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_msg_id() const;
  void _internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_msg_id = 3;
  void clear_end_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 end_msg_id() const;
  void set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_msg_id() const;
  void _internal_set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.MsgIdRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit constexpr Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return new Ping();
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {}
  ~Pong() override;
  explicit constexpr Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return new Pong();
  }

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pong& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastMsgIdFieldNumber = 1,
  };
  // int64 last_msg_id = 1;
  void clear_last_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id() const;
  void set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_msg_id() const;
  void _internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Reply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:oceanim.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  explicit constexpr Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return new Reply();
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Reply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Reply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oceanim.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SigninData

// int64 user_id = 1;
inline void SigninData::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigninData::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SigninData::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.SigninData.user_id)
  return _internal_user_id();
}
inline void SigninData::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void SigninData::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.SigninData.user_id)
}

// string password = 2;
inline void SigninData::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& SigninData::password() const {
  // @@protoc_insertion_point(field_get:oceanim.SigninData.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigninData::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.SigninData.password)
}
inline std::string* SigninData::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:oceanim.SigninData.password)
  return _s;
}
inline const std::string& SigninData::_internal_password() const {
  return password_.Get();
}
inline void SigninData::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigninData::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigninData::release_password() {
  // @@protoc_insertion_point(field_release:oceanim.SigninData.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigninData::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.SigninData.password)
}

// int32 client_timestamp = 3;
inline void SigninData::clear_client_timestamp() {
  client_timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SigninData::_internal_client_timestamp() const {
  return client_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SigninData::client_timestamp() const {
  // @@protoc_insertion_point(field_get:oceanim.SigninData.client_timestamp)
  return _internal_client_timestamp();
}
inline void SigninData::_internal_set_client_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_timestamp_ = value;
}
inline void SigninData::set_client_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:oceanim.SigninData.client_timestamp)
}

// string access_addr = 4;
inline void SigninData::clear_access_addr() {
  access_addr_.ClearToEmpty();
}
inline const std::string& SigninData::access_addr() const {
  // @@protoc_insertion_point(field_get:oceanim.SigninData.access_addr)
  return _internal_access_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SigninData::set_access_addr(ArgT0&& arg0, ArgT... args) {
 
 access_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.SigninData.access_addr)
}
inline std::string* SigninData::mutable_access_addr() {
  std::string* _s = _internal_mutable_access_addr();
  // @@protoc_insertion_point(field_mutable:oceanim.SigninData.access_addr)
  return _s;
}
inline const std::string& SigninData::_internal_access_addr() const {
  return access_addr_.Get();
}
inline void SigninData::_internal_set_access_addr(const std::string& value) {
  
  access_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SigninData::_internal_mutable_access_addr() {
  
  return access_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SigninData::release_access_addr() {
  // @@protoc_insertion_point(field_release:oceanim.SigninData.access_addr)
  return access_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SigninData::set_allocated_access_addr(std::string* access_addr) {
  if (access_addr != nullptr) {
    
  } else {
    
  }
  access_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.SigninData.access_addr)
}

// -------------------------------------------------------------------

// UserLastSendData

// int64 user_id = 1;
inline void UserLastSendData::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLastSendData::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLastSendData::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserLastSendData.user_id)
  return _internal_user_id();
}
inline void UserLastSendData::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserLastSendData::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserLastSendData.user_id)
}

// int64 msg_id = 2;
inline void UserLastSendData::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLastSendData::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLastSendData::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserLastSendData.msg_id)
  return _internal_msg_id();
}
inline void UserLastSendData::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void UserLastSendData::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserLastSendData.msg_id)
}

// int32 client_time = 3;
inline void UserLastSendData::clear_client_time() {
  client_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLastSendData::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLastSendData::client_time() const {
  // @@protoc_insertion_point(field_get:oceanim.UserLastSendData.client_time)
  return _internal_client_time();
}
inline void UserLastSendData::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_time_ = value;
}
inline void UserLastSendData::set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:oceanim.UserLastSendData.client_time)
}

// int32 msg_time = 4;
inline void UserLastSendData::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLastSendData::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLastSendData::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.UserLastSendData.msg_time)
  return _internal_msg_time();
}
inline void UserLastSendData::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void UserLastSendData::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.UserLastSendData.msg_time)
}

// -------------------------------------------------------------------

// Timestamp

// int32 timestamp = 1;
inline void Timestamp::clear_timestamp() {
  timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::timestamp() const {
  // @@protoc_insertion_point(field_get:oceanim.Timestamp.timestamp)
  return _internal_timestamp();
}
inline void Timestamp::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timestamp_ = value;
}
inline void Timestamp::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:oceanim.Timestamp.timestamp)
}

// -------------------------------------------------------------------

// NewMsg

// int64 user_id = 1;
inline void NewMsg::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewMsg::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewMsg::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.user_id)
  return _internal_user_id();
}
inline void NewMsg::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void NewMsg::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.user_id)
}

// int64 peer_id = 2;
inline void NewMsg::clear_peer_id() {
  peer_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewMsg::_internal_peer_id() const {
  return peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewMsg::peer_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.peer_id)
  return _internal_peer_id();
}
inline void NewMsg::_internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  peer_id_ = value;
}
inline void NewMsg::set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.peer_id)
}

// .oceanim.MsgType msg_type = 4;
inline void NewMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::oceanim::MsgType NewMsg::_internal_msg_type() const {
  return static_cast< ::oceanim::MsgType >(msg_type_);
}
inline ::oceanim::MsgType NewMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.msg_type)
  return _internal_msg_type();
}
inline void NewMsg::_internal_set_msg_type(::oceanim::MsgType value) {
  
  msg_type_ = value;
}
inline void NewMsg::set_msg_type(::oceanim::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.msg_type)
}

// string message = 5;
inline void NewMsg::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& NewMsg::message() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMsg::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.message)
}
inline std::string* NewMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:oceanim.NewMsg.message)
  return _s;
}
inline const std::string& NewMsg::_internal_message() const {
  return message_.Get();
}
inline void NewMsg::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewMsg::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewMsg::release_message() {
  // @@protoc_insertion_point(field_release:oceanim.NewMsg.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.NewMsg.message)
}

// int32 client_time = 6;
inline void NewMsg::clear_client_time() {
  client_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMsg::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMsg::client_time() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.client_time)
  return _internal_client_time();
}
inline void NewMsg::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_time_ = value;
}
inline void NewMsg::set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.client_time)
}

// int32 msg_time = 7;
inline void NewMsg::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMsg::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.NewMsg.msg_time)
  return _internal_msg_time();
}
inline void NewMsg::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void NewMsg::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.NewMsg.msg_time)
}

// -------------------------------------------------------------------

// MsgId

// int64 msg_id = 1;
inline void MsgId::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgId::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgId::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgId.msg_id)
  return _internal_msg_id();
}
inline void MsgId::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void MsgId::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgId.msg_id)
}

// -------------------------------------------------------------------

// UserId

// int64 user_id = 1;
inline void UserId::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserId::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserId::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserId.user_id)
  return _internal_user_id();
}
inline void UserId::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserId::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserId.user_id)
}

// -------------------------------------------------------------------

// UserIds

// repeated int64 user_ids = 1;
inline int UserIds::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int UserIds::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void UserIds::clear_user_ids() {
  user_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIds::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIds::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.UserIds.user_ids)
  return _internal_user_ids(index);
}
inline void UserIds::set_user_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:oceanim.UserIds.user_ids)
}
inline void UserIds::_internal_add_user_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  user_ids_.Add(value);
}
inline void UserIds::add_user_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_user_ids(value);
  // @@protoc_insertion_point(field_add:oceanim.UserIds.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UserIds::_internal_user_ids() const {
  return user_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UserIds::user_ids() const {
  // @@protoc_insertion_point(field_list:oceanim.UserIds.user_ids)
  return _internal_user_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UserIds::_internal_mutable_user_ids() {
  return &user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UserIds::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.UserIds.user_ids)
  return _internal_mutable_user_ids();
}

// -------------------------------------------------------------------

// UserInfo

// int64 user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserInfo.user_id)
}

// string name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:oceanim.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:oceanim.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:oceanim.UserInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.UserInfo.name)
}

// -------------------------------------------------------------------

// UserInfos

// repeated .oceanim.UserInfo user_infos = 1;
inline int UserInfos::_internal_user_infos_size() const {
  return user_infos_.size();
}
inline int UserInfos::user_infos_size() const {
  return _internal_user_infos_size();
}
inline void UserInfos::clear_user_infos() {
  user_infos_.Clear();
}
inline ::oceanim::UserInfo* UserInfos::mutable_user_infos(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.UserInfos.user_infos)
  return user_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserInfo >*
UserInfos::mutable_user_infos() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.UserInfos.user_infos)
  return &user_infos_;
}
inline const ::oceanim::UserInfo& UserInfos::_internal_user_infos(int index) const {
  return user_infos_.Get(index);
}
inline const ::oceanim::UserInfo& UserInfos::user_infos(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.UserInfos.user_infos)
  return _internal_user_infos(index);
}
inline ::oceanim::UserInfo* UserInfos::_internal_add_user_infos() {
  return user_infos_.Add();
}
inline ::oceanim::UserInfo* UserInfos::add_user_infos() {
  ::oceanim::UserInfo* _add = _internal_add_user_infos();
  // @@protoc_insertion_point(field_add:oceanim.UserInfos.user_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserInfo >&
UserInfos::user_infos() const {
  // @@protoc_insertion_point(field_list:oceanim.UserInfos.user_infos)
  return user_infos_;
}

// -------------------------------------------------------------------

// GroupId

// int64 group_id = 1;
inline void GroupId::clear_group_id() {
  group_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupId::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupId::group_id() const {
  // @@protoc_insertion_point(field_get:oceanim.GroupId.group_id)
  return _internal_group_id();
}
inline void GroupId::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupId::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:oceanim.GroupId.group_id)
}

// -------------------------------------------------------------------

// GroupInfo

// int64 group_id = 1;
inline void GroupInfo::clear_group_id() {
  group_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupInfo::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:oceanim.GroupInfo.group_id)
  return _internal_group_id();
}
inline void GroupInfo::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void GroupInfo::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:oceanim.GroupInfo.group_id)
}

// string name = 2;
inline void GroupInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GroupInfo::name() const {
  // @@protoc_insertion_point(field_get:oceanim.GroupInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.GroupInfo.name)
}
inline std::string* GroupInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:oceanim.GroupInfo.name)
  return _s;
}
inline const std::string& GroupInfo::_internal_name() const {
  return name_.Get();
}
inline void GroupInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GroupInfo::release_name() {
  // @@protoc_insertion_point(field_release:oceanim.GroupInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GroupInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.GroupInfo.name)
}

// -------------------------------------------------------------------

// GroupInfos

// repeated .oceanim.GroupInfo group_infos = 1;
inline int GroupInfos::_internal_group_infos_size() const {
  return group_infos_.size();
}
inline int GroupInfos::group_infos_size() const {
  return _internal_group_infos_size();
}
inline void GroupInfos::clear_group_infos() {
  group_infos_.Clear();
}
inline ::oceanim::GroupInfo* GroupInfos::mutable_group_infos(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.GroupInfos.group_infos)
  return group_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::GroupInfo >*
GroupInfos::mutable_group_infos() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.GroupInfos.group_infos)
  return &group_infos_;
}
inline const ::oceanim::GroupInfo& GroupInfos::_internal_group_infos(int index) const {
  return group_infos_.Get(index);
}
inline const ::oceanim::GroupInfo& GroupInfos::group_infos(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.GroupInfos.group_infos)
  return _internal_group_infos(index);
}
inline ::oceanim::GroupInfo* GroupInfos::_internal_add_group_infos() {
  return group_infos_.Add();
}
inline ::oceanim::GroupInfo* GroupInfos::add_group_infos() {
  ::oceanim::GroupInfo* _add = _internal_add_group_infos();
  // @@protoc_insertion_point(field_add:oceanim.GroupInfos.group_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::GroupInfo >&
GroupInfos::group_infos() const {
  // @@protoc_insertion_point(field_list:oceanim.GroupInfos.group_infos)
  return group_infos_;
}

// -------------------------------------------------------------------

// UserAndMsgId

// int64 user_id = 1;
inline void UserAndMsgId::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndMsgId::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndMsgId::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserAndMsgId.user_id)
  return _internal_user_id();
}
inline void UserAndMsgId::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserAndMsgId::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserAndMsgId.user_id)
}

// int64 msg_id = 2;
inline void UserAndMsgId::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndMsgId::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndMsgId::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserAndMsgId.msg_id)
  return _internal_msg_id();
}
inline void UserAndMsgId::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void UserAndMsgId::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserAndMsgId.msg_id)
}

// -------------------------------------------------------------------

// NewPrivateMsg

// int64 sender = 1;
inline void NewPrivateMsg::clear_sender() {
  sender_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::sender() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.sender)
  return _internal_sender();
}
inline void NewPrivateMsg::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_ = value;
}
inline void NewPrivateMsg::set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.sender)
}

// int64 sender_msg_id = 2;
inline void NewPrivateMsg::clear_sender_msg_id() {
  sender_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::_internal_sender_msg_id() const {
  return sender_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::sender_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.sender_msg_id)
  return _internal_sender_msg_id();
}
inline void NewPrivateMsg::_internal_set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_msg_id_ = value;
}
inline void NewPrivateMsg::set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.sender_msg_id)
}

// int64 receiver = 3;
inline void NewPrivateMsg::clear_receiver() {
  receiver_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::_internal_receiver() const {
  return receiver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::receiver() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.receiver)
  return _internal_receiver();
}
inline void NewPrivateMsg::_internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  receiver_ = value;
}
inline void NewPrivateMsg::set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.receiver)
}

// int64 receiver_msg_id = 4;
inline void NewPrivateMsg::clear_receiver_msg_id() {
  receiver_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::_internal_receiver_msg_id() const {
  return receiver_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewPrivateMsg::receiver_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.receiver_msg_id)
  return _internal_receiver_msg_id();
}
inline void NewPrivateMsg::_internal_set_receiver_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  receiver_msg_id_ = value;
}
inline void NewPrivateMsg::set_receiver_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.receiver_msg_id)
}

// string message = 6;
inline void NewPrivateMsg::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& NewPrivateMsg::message() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewPrivateMsg::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.message)
}
inline std::string* NewPrivateMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:oceanim.NewPrivateMsg.message)
  return _s;
}
inline const std::string& NewPrivateMsg::_internal_message() const {
  return message_.Get();
}
inline void NewPrivateMsg::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewPrivateMsg::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewPrivateMsg::release_message() {
  // @@protoc_insertion_point(field_release:oceanim.NewPrivateMsg.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewPrivateMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.NewPrivateMsg.message)
}

// int32 msg_time = 7;
inline void NewPrivateMsg::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPrivateMsg::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPrivateMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.msg_time)
  return _internal_msg_time();
}
inline void NewPrivateMsg::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void NewPrivateMsg::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.msg_time)
}

// int32 client_time = 8;
inline void NewPrivateMsg::clear_client_time() {
  client_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPrivateMsg::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewPrivateMsg::client_time() const {
  // @@protoc_insertion_point(field_get:oceanim.NewPrivateMsg.client_time)
  return _internal_client_time();
}
inline void NewPrivateMsg::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_time_ = value;
}
inline void NewPrivateMsg::set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:oceanim.NewPrivateMsg.client_time)
}

// -------------------------------------------------------------------

// NewGroupMsg

// int64 group_id = 1;
inline void NewGroupMsg::clear_group_id() {
  group_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::group_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.group_id)
  return _internal_group_id();
}
inline void NewGroupMsg::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void NewGroupMsg::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewGroupMsg.group_id)
}

// repeated .oceanim.UserAndMsgId user_and_msgids = 2;
inline int NewGroupMsg::_internal_user_and_msgids_size() const {
  return user_and_msgids_.size();
}
inline int NewGroupMsg::user_and_msgids_size() const {
  return _internal_user_and_msgids_size();
}
inline void NewGroupMsg::clear_user_and_msgids() {
  user_and_msgids_.Clear();
}
inline ::oceanim::UserAndMsgId* NewGroupMsg::mutable_user_and_msgids(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.NewGroupMsg.user_and_msgids)
  return user_and_msgids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndMsgId >*
NewGroupMsg::mutable_user_and_msgids() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.NewGroupMsg.user_and_msgids)
  return &user_and_msgids_;
}
inline const ::oceanim::UserAndMsgId& NewGroupMsg::_internal_user_and_msgids(int index) const {
  return user_and_msgids_.Get(index);
}
inline const ::oceanim::UserAndMsgId& NewGroupMsg::user_and_msgids(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.user_and_msgids)
  return _internal_user_and_msgids(index);
}
inline ::oceanim::UserAndMsgId* NewGroupMsg::_internal_add_user_and_msgids() {
  return user_and_msgids_.Add();
}
inline ::oceanim::UserAndMsgId* NewGroupMsg::add_user_and_msgids() {
  ::oceanim::UserAndMsgId* _add = _internal_add_user_and_msgids();
  // @@protoc_insertion_point(field_add:oceanim.NewGroupMsg.user_and_msgids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndMsgId >&
NewGroupMsg::user_and_msgids() const {
  // @@protoc_insertion_point(field_list:oceanim.NewGroupMsg.user_and_msgids)
  return user_and_msgids_;
}

// int64 sender_user_id = 3;
inline void NewGroupMsg::clear_sender_user_id() {
  sender_user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::_internal_sender_user_id() const {
  return sender_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::sender_user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.sender_user_id)
  return _internal_sender_user_id();
}
inline void NewGroupMsg::_internal_set_sender_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_user_id_ = value;
}
inline void NewGroupMsg::set_sender_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewGroupMsg.sender_user_id)
}

// int64 sender_msg_id = 4;
inline void NewGroupMsg::clear_sender_msg_id() {
  sender_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::_internal_sender_msg_id() const {
  return sender_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NewGroupMsg::sender_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.sender_msg_id)
  return _internal_sender_msg_id();
}
inline void NewGroupMsg::_internal_set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_msg_id_ = value;
}
inline void NewGroupMsg::set_sender_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.NewGroupMsg.sender_msg_id)
}

// string message = 5;
inline void NewGroupMsg::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& NewGroupMsg::message() const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewGroupMsg::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.NewGroupMsg.message)
}
inline std::string* NewGroupMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:oceanim.NewGroupMsg.message)
  return _s;
}
inline const std::string& NewGroupMsg::_internal_message() const {
  return message_.Get();
}
inline void NewGroupMsg::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewGroupMsg::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewGroupMsg::release_message() {
  // @@protoc_insertion_point(field_release:oceanim.NewGroupMsg.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewGroupMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.NewGroupMsg.message)
}

// int32 msg_time = 6;
inline void NewGroupMsg::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewGroupMsg::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewGroupMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.NewGroupMsg.msg_time)
  return _internal_msg_time();
}
inline void NewGroupMsg::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void NewGroupMsg::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.NewGroupMsg.msg_time)
}

// -------------------------------------------------------------------

// Msg

// int64 user_id = 1;
inline void Msg::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.user_id)
  return _internal_user_id();
}
inline void Msg::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void Msg::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.user_id)
}

// int64 msg_id = 2;
inline void Msg::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.msg_id)
  return _internal_msg_id();
}
inline void Msg::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void Msg::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.msg_id)
}

// int64 sender = 3;
inline void Msg::clear_sender() {
  sender_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::sender() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.sender)
  return _internal_sender();
}
inline void Msg::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_ = value;
}
inline void Msg::set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.sender)
}

// int64 receiver = 4;
inline void Msg::clear_receiver() {
  receiver_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::_internal_receiver() const {
  return receiver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::receiver() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.receiver)
  return _internal_receiver();
}
inline void Msg::_internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  receiver_ = value;
}
inline void Msg::set_receiver(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.receiver)
}

// string message = 5;
inline void Msg::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Msg::message() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.Msg.message)
}
inline std::string* Msg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:oceanim.Msg.message)
  return _s;
}
inline const std::string& Msg::_internal_message() const {
  return message_.Get();
}
inline void Msg::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg::release_message() {
  // @@protoc_insertion_point(field_release:oceanim.Msg.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.Msg.message)
}

// int64 group_id = 6;
inline void Msg::clear_group_id() {
  group_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Msg::group_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.group_id)
  return _internal_group_id();
}
inline void Msg::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void Msg::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.group_id)
}

// int32 client_time = 8;
inline void Msg::clear_client_time() {
  client_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::client_time() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.client_time)
  return _internal_client_time();
}
inline void Msg::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_time_ = value;
}
inline void Msg::set_client_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.client_time)
}

// int32 msg_time = 9;
inline void Msg::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.Msg.msg_time)
  return _internal_msg_time();
}
inline void Msg::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void Msg::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.Msg.msg_time)
}

// -------------------------------------------------------------------

// Msgs

// repeated .oceanim.Msg msgs = 1;
inline int Msgs::_internal_msgs_size() const {
  return msgs_.size();
}
inline int Msgs::msgs_size() const {
  return _internal_msgs_size();
}
inline void Msgs::clear_msgs() {
  msgs_.Clear();
}
inline ::oceanim::Msg* Msgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.Msgs.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Msg >*
Msgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.Msgs.msgs)
  return &msgs_;
}
inline const ::oceanim::Msg& Msgs::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::oceanim::Msg& Msgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.Msgs.msgs)
  return _internal_msgs(index);
}
inline ::oceanim::Msg* Msgs::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::oceanim::Msg* Msgs::add_msgs() {
  ::oceanim::Msg* _add = _internal_add_msgs();
  // @@protoc_insertion_point(field_add:oceanim.Msgs.msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Msg >&
Msgs::msgs() const {
  // @@protoc_insertion_point(field_list:oceanim.Msgs.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// MsgReply

// int32 msg_time = 2;
inline void MsgReply::clear_msg_time() {
  msg_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgReply::_internal_msg_time() const {
  return msg_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgReply::msg_time() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgReply.msg_time)
  return _internal_msg_time();
}
inline void MsgReply::_internal_set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_time_ = value;
}
inline void MsgReply::set_msg_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_time(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgReply.msg_time)
}

// int64 msg_id = 3;
inline void MsgReply::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgReply::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgReply::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgReply.msg_id)
  return _internal_msg_id();
}
inline void MsgReply::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void MsgReply::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgReply.msg_id)
}

// int64 last_msg_id = 4;
inline void MsgReply::clear_last_msg_id() {
  last_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgReply::_internal_last_msg_id() const {
  return last_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgReply::last_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgReply.last_msg_id)
  return _internal_last_msg_id();
}
inline void MsgReply::_internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_msg_id_ = value;
}
inline void MsgReply::set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgReply.last_msg_id)
}

// -------------------------------------------------------------------

// MsgIdRange

// int64 user_id = 1;
inline void MsgIdRange::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIdRange.user_id)
  return _internal_user_id();
}
inline void MsgIdRange::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void MsgIdRange::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIdRange.user_id)
}

// int64 start_msg_id = 2;
inline void MsgIdRange::clear_start_msg_id() {
  start_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::_internal_start_msg_id() const {
  return start_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::start_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIdRange.start_msg_id)
  return _internal_start_msg_id();
}
inline void MsgIdRange::_internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_msg_id_ = value;
}
inline void MsgIdRange::set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIdRange.start_msg_id)
}

// int64 end_msg_id = 3;
inline void MsgIdRange::clear_end_msg_id() {
  end_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::_internal_end_msg_id() const {
  return end_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIdRange::end_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIdRange.end_msg_id)
  return _internal_end_msg_id();
}
inline void MsgIdRange::_internal_set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_msg_id_ = value;
}
inline void MsgIdRange::set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIdRange.end_msg_id)
}

// -------------------------------------------------------------------

// Ping

// int64 user_id = 1;
inline void Ping::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ping::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ping::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Ping.user_id)
  return _internal_user_id();
}
inline void Ping::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void Ping::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Ping.user_id)
}

// -------------------------------------------------------------------

// Pong

// int64 last_msg_id = 1;
inline void Pong::clear_last_msg_id() {
  last_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Pong::_internal_last_msg_id() const {
  return last_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Pong::last_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Pong.last_msg_id)
  return _internal_last_msg_id();
}
inline void Pong::_internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_msg_id_ = value;
}
inline void Pong::set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Pong.last_msg_id)
}

// -------------------------------------------------------------------

// Reply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oceanim

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oceanim::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oceanim::MsgType>() {
  return ::oceanim::MsgType_descriptor();
}
template <> struct is_proto_enum< ::oceanim::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oceanim::DataType>() {
  return ::oceanim::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
