// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/logic/logic.proto

#include "server/logic/logic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace oceanim {
}  // namespace oceanim
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_2flogic_2flogic_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_server_2flogic_2flogic_2eproto[1];
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2flogic_2flogic_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_server_2flogic_2flogic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030server/logic/logic.proto\022\007oceanim\032\034ser"
  "ver/common/messages.proto2\333\002\n\014LogicServi"
  "ce\022$\n\004Test\022\r.oceanim.Ping\032\r.oceanim.Pong"
  "\022-\n\007SendMsg\022\017.oceanim.NewMsg\032\021.oceanim.M"
  "sgReply\022(\n\010PullData\022\r.oceanim.Ping\032\r.oce"
  "anim.Msgs\022-\n\007GetMsgs\022\023.oceanim.MsgIdRang"
  "e\032\r.oceanim.Msgs\0221\n\nGetFriends\022\017.oceanim"
  ".UserId\032\022.oceanim.UserInfos\0221\n\tGetGroups"
  "\022\017.oceanim.UserId\032\023.oceanim.GroupInfos\0227"
  "\n\017GetGroupMembers\022\020.oceanim.GroupId\032\022.oc"
  "eanim.UserInfosB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2flogic_2flogic_2eproto_deps[1] = {
  &::descriptor_table_server_2fcommon_2fmessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2flogic_2flogic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2flogic_2flogic_2eproto = {
  false, false, 428, descriptor_table_protodef_server_2flogic_2flogic_2eproto, "server/logic/logic.proto", 
  &descriptor_table_server_2flogic_2flogic_2eproto_once, descriptor_table_server_2flogic_2flogic_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_server_2flogic_2flogic_2eproto::offsets,
  nullptr, file_level_enum_descriptors_server_2flogic_2flogic_2eproto, file_level_service_descriptors_server_2flogic_2flogic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2flogic_2flogic_2eproto_getter() {
  return &descriptor_table_server_2flogic_2flogic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2flogic_2flogic_2eproto(&descriptor_table_server_2flogic_2flogic_2eproto);
namespace oceanim {

// ===================================================================

LogicService::~LogicService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* LogicService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2flogic_2flogic_2eproto);
  return file_level_service_descriptors_server_2flogic_2flogic_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* LogicService::GetDescriptor() {
  return descriptor();
}

void LogicService::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::Ping*,
                         ::oceanim::Pong*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Test() not implemented.");
  done->Run();
}

void LogicService::SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::NewMsg*,
                         ::oceanim::MsgReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMsg() not implemented.");
  done->Run();
}

void LogicService::PullData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::Ping*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PullData() not implemented.");
  done->Run();
}

void LogicService::GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::MsgIdRange*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMsgs() not implemented.");
  done->Run();
}

void LogicService::GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::UserInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriends() not implemented.");
  done->Run();
}

void LogicService::GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::GroupInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroups() not implemented.");
  done->Run();
}

void LogicService::GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::GroupId*,
                         ::oceanim::UserInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroupMembers() not implemented.");
  done->Run();
}

void LogicService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_server_2flogic_2flogic_2eproto[0]);
  switch(method->index()) {
    case 0:
      Test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::Ping*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Pong*>(
                 response),
             done);
      break;
    case 1:
      SendMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::NewMsg*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::MsgReply*>(
                 response),
             done);
      break;
    case 2:
      PullData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::Ping*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 3:
      GetMsgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::MsgIdRange*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 4:
      GetFriends(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::UserInfos*>(
                 response),
             done);
      break;
    case 5:
      GetGroups(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::GroupInfos*>(
                 response),
             done);
      break;
    case 6:
      GetGroupMembers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::GroupId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::UserInfos*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& LogicService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::Ping::default_instance();
    case 1:
      return ::oceanim::NewMsg::default_instance();
    case 2:
      return ::oceanim::Ping::default_instance();
    case 3:
      return ::oceanim::MsgIdRange::default_instance();
    case 4:
      return ::oceanim::UserId::default_instance();
    case 5:
      return ::oceanim::UserId::default_instance();
    case 6:
      return ::oceanim::GroupId::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& LogicService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::Pong::default_instance();
    case 1:
      return ::oceanim::MsgReply::default_instance();
    case 2:
      return ::oceanim::Msgs::default_instance();
    case 3:
      return ::oceanim::Msgs::default_instance();
    case 4:
      return ::oceanim::UserInfos::default_instance();
    case 5:
      return ::oceanim::GroupInfos::default_instance();
    case 6:
      return ::oceanim::UserInfos::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

LogicService_Stub::LogicService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
LogicService_Stub::LogicService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
LogicService_Stub::~LogicService_Stub() {
  if (owns_channel_) delete channel_;
}

void LogicService_Stub::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::Ping* request,
                              ::oceanim::Pong* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void LogicService_Stub::SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::NewMsg* request,
                              ::oceanim::MsgReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void LogicService_Stub::PullData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::Ping* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void LogicService_Stub::GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::MsgIdRange* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void LogicService_Stub::GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::UserInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void LogicService_Stub::GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::GroupInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void LogicService_Stub::GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::GroupId* request,
                              ::oceanim::UserInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
