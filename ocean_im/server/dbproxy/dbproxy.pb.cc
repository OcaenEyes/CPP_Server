// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/dbproxy/dbproxy.proto

#include "server/dbproxy/dbproxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace oceanim {
constexpr Session::Session(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0})
  , has_session_(false){}
struct SessionDefaultTypeInternal {
  constexpr SessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionDefaultTypeInternal _Session_default_instance_;
constexpr Sessions::Sessions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessions_(){}
struct SessionsDefaultTypeInternal {
  constexpr SessionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SessionsDefaultTypeInternal() {}
  union {
    Sessions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SessionsDefaultTypeInternal _Sessions_default_instance_;
constexpr UserIdAndGroupId::UserIdAndGroupId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_id_(int64_t{0})
  , group_id_(int64_t{0})
  , msg_count_(0){}
struct UserIdAndGroupIdDefaultTypeInternal {
  constexpr UserIdAndGroupIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserIdAndGroupIdDefaultTypeInternal() {}
  union {
    UserIdAndGroupId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserIdAndGroupIdDefaultTypeInternal _UserIdAndGroupId_default_instance_;
constexpr PairUserId::PairUserId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0})
  , peer_id_(int64_t{0})
  , msg_count_(0){}
struct PairUserIdDefaultTypeInternal {
  constexpr PairUserIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PairUserIdDefaultTypeInternal() {}
  union {
    PairUserId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PairUserIdDefaultTypeInternal _PairUserId_default_instance_;
constexpr PairMsgId::PairMsgId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0})
  , start_msg_id_(int64_t{0})
  , end_msg_id_(int64_t{0}){}
struct PairMsgIdDefaultTypeInternal {
  constexpr PairMsgIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PairMsgIdDefaultTypeInternal() {}
  union {
    PairMsgId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PairMsgIdDefaultTypeInternal _PairMsgId_default_instance_;
}  // namespace oceanim
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_2fdbproxy_2fdbproxy_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_server_2fdbproxy_2fdbproxy_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2fdbproxy_2fdbproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::Session, has_session_),
  PROTOBUF_FIELD_OFFSET(::oceanim::Session, user_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::Session, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::Sessions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::Sessions, sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::UserIdAndGroupId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::UserIdAndGroupId, msg_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::UserIdAndGroupId, group_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::UserIdAndGroupId, msg_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::PairUserId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::PairUserId, user_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::PairUserId, peer_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::PairUserId, msg_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::PairMsgId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::PairMsgId, user_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::PairMsgId, start_msg_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::PairMsgId, end_msg_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::oceanim::Session)},
  { 9, -1, -1, sizeof(::oceanim::Sessions)},
  { 16, -1, -1, sizeof(::oceanim::UserIdAndGroupId)},
  { 25, -1, -1, sizeof(::oceanim::PairUserId)},
  { 34, -1, -1, sizeof(::oceanim::PairMsgId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_Sessions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_UserIdAndGroupId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_PairUserId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_PairMsgId_default_instance_),
};

const char descriptor_table_protodef_server_2fdbproxy_2fdbproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034server/dbproxy/dbproxy.proto\022\007oceanim\032"
  "\034server/common/messages.proto\"=\n\007Session"
  "\022\023\n\013has_session\030\001 \001(\010\022\017\n\007user_id\030\002 \001(\003\022\014"
  "\n\004addr\030\003 \001(\t\".\n\010Sessions\022\"\n\010sessions\030\001 \003"
  "(\0132\020.oceanim.Session\"G\n\020UserIdAndGroupId"
  "\022\016\n\006msg_id\030\001 \001(\003\022\020\n\010group_id\030\002 \001(\003\022\021\n\tms"
  "g_count\030\003 \001(\005\"A\n\nPairUserId\022\017\n\007user_id\030\001"
  " \001(\003\022\017\n\007peer_id\030\002 \001(\003\022\021\n\tmsg_count\030\003 \001(\005"
  "\"F\n\tPairMsgId\022\017\n\007user_id\030\001 \001(\003\022\024\n\014start_"
  "msg_id\030\002 \001(\003\022\022\n\nend_msg_id\030\003 \001(\0032\355\006\n\016DbP"
  "roxyService\022$\n\004Test\022\r.oceanim.Ping\032\r.oce"
  "anim.Pong\0228\n\022AuthAndSaveSession\022\023.oceani"
  "m.SigninData\032\r.oceanim.Pong\022.\n\014ClearSess"
  "ion\022\017.oceanim.UserId\032\r.oceanim.Pong\0228\n\016S"
  "avePrivateMsg\022\026.oceanim.NewPrivateMsg\032\016."
  "oceanim.Reply\0224\n\014SaveGroupMsg\022\024.oceanim."
  "NewGroupMsg\032\016.oceanim.Reply\022<\n\020GetLastGr"
  "oupMsgs\022\031.oceanim.UserIdAndGroupId\032\r.oce"
  "anim.Msgs\0224\n\016GetPrivateMsgs\022\023.oceanim.Pa"
  "irUserId\032\r.oceanim.Msgs\0220\n\013GetUserMsgs\022\022"
  ".oceanim.PairMsgId\032\r.oceanim.Msgs\022/\n\014Get"
  "LastMsgId\022\017.oceanim.UserId\032\016.oceanim.Msg"
  "Id\022\?\n\023SetUserLastSendData\022\031.oceanim.User"
  "LastSendData\032\r.oceanim.Pong\022A\n\023GetUserLa"
  "stSendData\022\017.oceanim.UserId\032\031.oceanim.Us"
  "erLastSendData\0222\n\013GetSessions\022\020.oceanim."
  "UserIds\032\021.oceanim.Sessions\022-\n\007GetMsgs\022\023."
  "oceanim.MsgIdRange\032\r.oceanim.Msgs\0221\n\nGet"
  "Friends\022\017.oceanim.UserId\032\022.oceanim.UserI"
  "nfos\0221\n\tGetGroups\022\017.oceanim.UserId\032\023.oce"
  "anim.GroupInfos\0227\n\017GetGroupMembers\022\020.oce"
  "anim.GroupId\032\022.oceanim.UserInfosB\003\200\001\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_deps[1] = {
  &::descriptor_table_server_2fcommon_2fmessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fdbproxy_2fdbproxy_2eproto = {
  false, false, 1285, descriptor_table_protodef_server_2fdbproxy_2fdbproxy_2eproto, "server/dbproxy/dbproxy.proto", 
  &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once, descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_server_2fdbproxy_2fdbproxy_2eproto::offsets,
  file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto, file_level_enum_descriptors_server_2fdbproxy_2fdbproxy_2eproto, file_level_service_descriptors_server_2fdbproxy_2fdbproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter() {
  return &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fdbproxy_2fdbproxy_2eproto(&descriptor_table_server_2fdbproxy_2fdbproxy_2eproto);
namespace oceanim {

// ===================================================================

class Session::_Internal {
 public:
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_session_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(has_session_));
  // @@protoc_insertion_point(copy_constructor:oceanim.Session)
}

void Session::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_session_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(has_session_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:oceanim.Session)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_session_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(has_session_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oceanim.Session.addr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_session = 1;
  if (this->_internal_has_session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_session(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string addr = 3;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "oceanim.Session.addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 3;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // bool has_session = 1;
  if (this->_internal_has_session() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }

void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Session *>(to)->MergeFrom(
      static_cast<const Session &>(from));
}


void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.Session)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_session() != 0) {
    _internal_set_has_session(from._internal_has_session());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, has_session_)
      + sizeof(Session::has_session_)
      - PROTOBUF_FIELD_OFFSET(Session, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter, &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once,
      file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[0]);
}

// ===================================================================

class Sessions::_Internal {
 public:
};

Sessions::Sessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.Sessions)
}
Sessions::Sessions(const Sessions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:oceanim.Sessions)
}

void Sessions::SharedCtor() {
}

Sessions::~Sessions() {
  // @@protoc_insertion_point(destructor:oceanim.Sessions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sessions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sessions::ArenaDtor(void* object) {
  Sessions* _this = reinterpret_cast< Sessions* >(object);
  (void)_this;
}
void Sessions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sessions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sessions::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.Sessions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sessions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .oceanim.Session sessions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sessions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.Sessions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oceanim.Session sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.Sessions)
  return target;
}

size_t Sessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.Sessions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oceanim.Session sessions = 1;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sessions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sessions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sessions::GetClassData() const { return &_class_data_; }

void Sessions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sessions *>(to)->MergeFrom(
      static_cast<const Sessions &>(from));
}


void Sessions::MergeFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.Sessions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sessions::CopyFrom(const Sessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.Sessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sessions::IsInitialized() const {
  return true;
}

void Sessions::InternalSwap(Sessions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sessions_.InternalSwap(&other->sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sessions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter, &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once,
      file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[1]);
}

// ===================================================================

class UserIdAndGroupId::_Internal {
 public:
};

UserIdAndGroupId::UserIdAndGroupId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.UserIdAndGroupId)
}
UserIdAndGroupId::UserIdAndGroupId(const UserIdAndGroupId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_count_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_count_));
  // @@protoc_insertion_point(copy_constructor:oceanim.UserIdAndGroupId)
}

void UserIdAndGroupId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_count_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_count_));
}

UserIdAndGroupId::~UserIdAndGroupId() {
  // @@protoc_insertion_point(destructor:oceanim.UserIdAndGroupId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserIdAndGroupId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserIdAndGroupId::ArenaDtor(void* object) {
  UserIdAndGroupId* _this = reinterpret_cast< UserIdAndGroupId* >(object);
  (void)_this;
}
void UserIdAndGroupId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserIdAndGroupId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserIdAndGroupId::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.UserIdAndGroupId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_count_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIdAndGroupId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserIdAndGroupId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.UserIdAndGroupId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_group_id(), target);
  }

  // int32 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msg_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.UserIdAndGroupId)
  return target;
}

size_t UserIdAndGroupId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.UserIdAndGroupId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_group_id());
  }

  // int32 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIdAndGroupId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserIdAndGroupId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIdAndGroupId::GetClassData() const { return &_class_data_; }

void UserIdAndGroupId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserIdAndGroupId *>(to)->MergeFrom(
      static_cast<const UserIdAndGroupId &>(from));
}


void UserIdAndGroupId::MergeFrom(const UserIdAndGroupId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.UserIdAndGroupId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_msg_count() != 0) {
    _internal_set_msg_count(from._internal_msg_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIdAndGroupId::CopyFrom(const UserIdAndGroupId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.UserIdAndGroupId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdAndGroupId::IsInitialized() const {
  return true;
}

void UserIdAndGroupId::InternalSwap(UserIdAndGroupId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserIdAndGroupId, msg_count_)
      + sizeof(UserIdAndGroupId::msg_count_)
      - PROTOBUF_FIELD_OFFSET(UserIdAndGroupId, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIdAndGroupId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter, &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once,
      file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[2]);
}

// ===================================================================

class PairUserId::_Internal {
 public:
};

PairUserId::PairUserId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.PairUserId)
}
PairUserId::PairUserId(const PairUserId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_count_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_count_));
  // @@protoc_insertion_point(copy_constructor:oceanim.PairUserId)
}

void PairUserId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_count_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_count_));
}

PairUserId::~PairUserId() {
  // @@protoc_insertion_point(destructor:oceanim.PairUserId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PairUserId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PairUserId::ArenaDtor(void* object) {
  PairUserId* _this = reinterpret_cast< PairUserId* >(object);
  (void)_this;
}
void PairUserId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PairUserId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PairUserId::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.PairUserId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_count_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PairUserId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          peer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairUserId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.PairUserId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int64 peer_id = 2;
  if (this->_internal_peer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_peer_id(), target);
  }

  // int32 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msg_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.PairUserId)
  return target;
}

size_t PairUserId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.PairUserId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 peer_id = 2;
  if (this->_internal_peer_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_peer_id());
  }

  // int32 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PairUserId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PairUserId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PairUserId::GetClassData() const { return &_class_data_; }

void PairUserId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PairUserId *>(to)->MergeFrom(
      static_cast<const PairUserId &>(from));
}


void PairUserId::MergeFrom(const PairUserId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.PairUserId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_peer_id() != 0) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from._internal_msg_count() != 0) {
    _internal_set_msg_count(from._internal_msg_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PairUserId::CopyFrom(const PairUserId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.PairUserId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairUserId::IsInitialized() const {
  return true;
}

void PairUserId::InternalSwap(PairUserId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PairUserId, msg_count_)
      + sizeof(PairUserId::msg_count_)
      - PROTOBUF_FIELD_OFFSET(PairUserId, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PairUserId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter, &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once,
      file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[3]);
}

// ===================================================================

class PairMsgId::_Internal {
 public:
};

PairMsgId::PairMsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.PairMsgId)
}
PairMsgId::PairMsgId(const PairMsgId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(end_msg_id_));
  // @@protoc_insertion_point(copy_constructor:oceanim.PairMsgId)
}

void PairMsgId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(end_msg_id_));
}

PairMsgId::~PairMsgId() {
  // @@protoc_insertion_point(destructor:oceanim.PairMsgId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PairMsgId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PairMsgId::ArenaDtor(void* object) {
  PairMsgId* _this = reinterpret_cast< PairMsgId* >(object);
  (void)_this;
}
void PairMsgId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PairMsgId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PairMsgId::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.PairMsgId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_msg_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(end_msg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PairMsgId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairMsgId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.PairMsgId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int64 start_msg_id = 2;
  if (this->_internal_start_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_msg_id(), target);
  }

  // int64 end_msg_id = 3;
  if (this->_internal_end_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_end_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.PairMsgId)
  return target;
}

size_t PairMsgId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.PairMsgId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 start_msg_id = 2;
  if (this->_internal_start_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_msg_id());
  }

  // int64 end_msg_id = 3;
  if (this->_internal_end_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end_msg_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PairMsgId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PairMsgId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PairMsgId::GetClassData() const { return &_class_data_; }

void PairMsgId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PairMsgId *>(to)->MergeFrom(
      static_cast<const PairMsgId &>(from));
}


void PairMsgId::MergeFrom(const PairMsgId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.PairMsgId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_start_msg_id() != 0) {
    _internal_set_start_msg_id(from._internal_start_msg_id());
  }
  if (from._internal_end_msg_id() != 0) {
    _internal_set_end_msg_id(from._internal_end_msg_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PairMsgId::CopyFrom(const PairMsgId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.PairMsgId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairMsgId::IsInitialized() const {
  return true;
}

void PairMsgId::InternalSwap(PairMsgId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PairMsgId, end_msg_id_)
      + sizeof(PairMsgId::end_msg_id_)
      - PROTOBUF_FIELD_OFFSET(PairMsgId, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PairMsgId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_getter, &descriptor_table_server_2fdbproxy_2fdbproxy_2eproto_once,
      file_level_metadata_server_2fdbproxy_2fdbproxy_2eproto[4]);
}

// ===================================================================

DbProxyService::~DbProxyService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DbProxyService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fdbproxy_2fdbproxy_2eproto);
  return file_level_service_descriptors_server_2fdbproxy_2fdbproxy_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DbProxyService::GetDescriptor() {
  return descriptor();
}

void DbProxyService::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::Ping*,
                         ::oceanim::Pong*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Test() not implemented.");
  done->Run();
}

void DbProxyService::AuthAndSaveSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::SigninData*,
                         ::oceanim::Pong*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AuthAndSaveSession() not implemented.");
  done->Run();
}

void DbProxyService::ClearSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::Pong*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClearSession() not implemented.");
  done->Run();
}

void DbProxyService::SavePrivateMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::NewPrivateMsg*,
                         ::oceanim::Reply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SavePrivateMsg() not implemented.");
  done->Run();
}

void DbProxyService::SaveGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::NewGroupMsg*,
                         ::oceanim::Reply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveGroupMsg() not implemented.");
  done->Run();
}

void DbProxyService::GetLastGroupMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserIdAndGroupId*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLastGroupMsgs() not implemented.");
  done->Run();
}

void DbProxyService::GetPrivateMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::PairUserId*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPrivateMsgs() not implemented.");
  done->Run();
}

void DbProxyService::GetUserMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::PairMsgId*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserMsgs() not implemented.");
  done->Run();
}

void DbProxyService::GetLastMsgId(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::MsgId*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLastMsgId() not implemented.");
  done->Run();
}

void DbProxyService::SetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserLastSendData*,
                         ::oceanim::Pong*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserLastSendData() not implemented.");
  done->Run();
}

void DbProxyService::GetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::UserLastSendData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserLastSendData() not implemented.");
  done->Run();
}

void DbProxyService::GetSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserIds*,
                         ::oceanim::Sessions*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSessions() not implemented.");
  done->Run();
}

void DbProxyService::GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::MsgIdRange*,
                         ::oceanim::Msgs*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMsgs() not implemented.");
  done->Run();
}

void DbProxyService::GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::UserInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriends() not implemented.");
  done->Run();
}

void DbProxyService::GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::UserId*,
                         ::oceanim::GroupInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroups() not implemented.");
  done->Run();
}

void DbProxyService::GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::GroupId*,
                         ::oceanim::UserInfos*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroupMembers() not implemented.");
  done->Run();
}

void DbProxyService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_server_2fdbproxy_2fdbproxy_2eproto[0]);
  switch(method->index()) {
    case 0:
      Test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::Ping*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Pong*>(
                 response),
             done);
      break;
    case 1:
      AuthAndSaveSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::SigninData*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Pong*>(
                 response),
             done);
      break;
    case 2:
      ClearSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Pong*>(
                 response),
             done);
      break;
    case 3:
      SavePrivateMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::NewPrivateMsg*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Reply*>(
                 response),
             done);
      break;
    case 4:
      SaveGroupMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::NewGroupMsg*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Reply*>(
                 response),
             done);
      break;
    case 5:
      GetLastGroupMsgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserIdAndGroupId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 6:
      GetPrivateMsgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::PairUserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 7:
      GetUserMsgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::PairMsgId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 8:
      GetLastMsgId(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::MsgId*>(
                 response),
             done);
      break;
    case 9:
      SetUserLastSendData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserLastSendData*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Pong*>(
                 response),
             done);
      break;
    case 10:
      GetUserLastSendData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::UserLastSendData*>(
                 response),
             done);
      break;
    case 11:
      GetSessions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserIds*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Sessions*>(
                 response),
             done);
      break;
    case 12:
      GetMsgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::MsgIdRange*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::Msgs*>(
                 response),
             done);
      break;
    case 13:
      GetFriends(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::UserInfos*>(
                 response),
             done);
      break;
    case 14:
      GetGroups(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::UserId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::GroupInfos*>(
                 response),
             done);
      break;
    case 15:
      GetGroupMembers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::GroupId*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::UserInfos*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DbProxyService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::Ping::default_instance();
    case 1:
      return ::oceanim::SigninData::default_instance();
    case 2:
      return ::oceanim::UserId::default_instance();
    case 3:
      return ::oceanim::NewPrivateMsg::default_instance();
    case 4:
      return ::oceanim::NewGroupMsg::default_instance();
    case 5:
      return ::oceanim::UserIdAndGroupId::default_instance();
    case 6:
      return ::oceanim::PairUserId::default_instance();
    case 7:
      return ::oceanim::PairMsgId::default_instance();
    case 8:
      return ::oceanim::UserId::default_instance();
    case 9:
      return ::oceanim::UserLastSendData::default_instance();
    case 10:
      return ::oceanim::UserId::default_instance();
    case 11:
      return ::oceanim::UserIds::default_instance();
    case 12:
      return ::oceanim::MsgIdRange::default_instance();
    case 13:
      return ::oceanim::UserId::default_instance();
    case 14:
      return ::oceanim::UserId::default_instance();
    case 15:
      return ::oceanim::GroupId::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DbProxyService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::Pong::default_instance();
    case 1:
      return ::oceanim::Pong::default_instance();
    case 2:
      return ::oceanim::Pong::default_instance();
    case 3:
      return ::oceanim::Reply::default_instance();
    case 4:
      return ::oceanim::Reply::default_instance();
    case 5:
      return ::oceanim::Msgs::default_instance();
    case 6:
      return ::oceanim::Msgs::default_instance();
    case 7:
      return ::oceanim::Msgs::default_instance();
    case 8:
      return ::oceanim::MsgId::default_instance();
    case 9:
      return ::oceanim::Pong::default_instance();
    case 10:
      return ::oceanim::UserLastSendData::default_instance();
    case 11:
      return ::oceanim::Sessions::default_instance();
    case 12:
      return ::oceanim::Msgs::default_instance();
    case 13:
      return ::oceanim::UserInfos::default_instance();
    case 14:
      return ::oceanim::GroupInfos::default_instance();
    case 15:
      return ::oceanim::UserInfos::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DbProxyService_Stub::DbProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DbProxyService_Stub::DbProxyService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DbProxyService_Stub::~DbProxyService_Stub() {
  if (owns_channel_) delete channel_;
}

void DbProxyService_Stub::Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::Ping* request,
                              ::oceanim::Pong* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DbProxyService_Stub::AuthAndSaveSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::SigninData* request,
                              ::oceanim::Pong* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DbProxyService_Stub::ClearSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::Pong* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DbProxyService_Stub::SavePrivateMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::NewPrivateMsg* request,
                              ::oceanim::Reply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DbProxyService_Stub::SaveGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::NewGroupMsg* request,
                              ::oceanim::Reply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetLastGroupMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserIdAndGroupId* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetPrivateMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::PairUserId* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetUserMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::PairMsgId* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetLastMsgId(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::MsgId* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void DbProxyService_Stub::SetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserLastSendData* request,
                              ::oceanim::Pong* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::UserLastSendData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserIds* request,
                              ::oceanim::Sessions* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::MsgIdRange* request,
                              ::oceanim::Msgs* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::UserInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::UserId* request,
                              ::oceanim::GroupInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void DbProxyService_Stub::GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::GroupId* request,
                              ::oceanim::UserInfos* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oceanim::Session* Arena::CreateMaybeMessage< ::oceanim::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::Sessions* Arena::CreateMaybeMessage< ::oceanim::Sessions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::Sessions >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::UserIdAndGroupId* Arena::CreateMaybeMessage< ::oceanim::UserIdAndGroupId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::UserIdAndGroupId >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::PairUserId* Arena::CreateMaybeMessage< ::oceanim::PairUserId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::PairUserId >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::PairMsgId* Arena::CreateMaybeMessage< ::oceanim::PairMsgId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::PairMsgId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
