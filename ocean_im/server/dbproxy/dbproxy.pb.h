// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/dbproxy/dbproxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fdbproxy_2fdbproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fdbproxy_2fdbproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "server/common/messages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fdbproxy_2fdbproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fdbproxy_2fdbproxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fdbproxy_2fdbproxy_2eproto;
namespace oceanim {
class PairMsgId;
struct PairMsgIdDefaultTypeInternal;
extern PairMsgIdDefaultTypeInternal _PairMsgId_default_instance_;
class PairUserId;
struct PairUserIdDefaultTypeInternal;
extern PairUserIdDefaultTypeInternal _PairUserId_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class Sessions;
struct SessionsDefaultTypeInternal;
extern SessionsDefaultTypeInternal _Sessions_default_instance_;
class UserIdAndGroupId;
struct UserIdAndGroupIdDefaultTypeInternal;
extern UserIdAndGroupIdDefaultTypeInternal _UserIdAndGroupId_default_instance_;
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
template<> ::oceanim::PairMsgId* Arena::CreateMaybeMessage<::oceanim::PairMsgId>(Arena*);
template<> ::oceanim::PairUserId* Arena::CreateMaybeMessage<::oceanim::PairUserId>(Arena*);
template<> ::oceanim::Session* Arena::CreateMaybeMessage<::oceanim::Session>(Arena*);
template<> ::oceanim::Sessions* Arena::CreateMaybeMessage<::oceanim::Sessions>(Arena*);
template<> ::oceanim::UserIdAndGroupId* Arena::CreateMaybeMessage<::oceanim::UserIdAndGroupId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oceanim {

// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return new Session();
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 3,
    kUserIdFieldNumber = 2,
    kHasSessionFieldNumber = 1,
  };
  // string addr = 3;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool has_session = 1;
  void clear_has_session();
  bool has_session() const;
  void set_has_session(bool value);
  private:
  bool _internal_has_session() const;
  void _internal_set_has_session(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  bool has_session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fdbproxy_2fdbproxy_2eproto;
};
// -------------------------------------------------------------------

class Sessions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.Sessions) */ {
 public:
  inline Sessions() : Sessions(nullptr) {}
  ~Sessions() override;
  explicit constexpr Sessions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sessions(const Sessions& from);
  Sessions(Sessions&& from) noexcept
    : Sessions() {
    *this = ::std::move(from);
  }

  inline Sessions& operator=(const Sessions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sessions& operator=(Sessions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sessions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sessions* internal_default_instance() {
    return reinterpret_cast<const Sessions*>(
               &_Sessions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sessions& a, Sessions& b) {
    a.Swap(&b);
  }
  inline void Swap(Sessions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sessions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sessions* New() const final {
    return new Sessions();
  }

  Sessions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sessions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sessions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sessions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sessions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.Sessions";
  }
  protected:
  explicit Sessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .oceanim.Session sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::oceanim::Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Session >*
      mutable_sessions();
  private:
  const ::oceanim::Session& _internal_sessions(int index) const;
  ::oceanim::Session* _internal_add_sessions();
  public:
  const ::oceanim::Session& sessions(int index) const;
  ::oceanim::Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:oceanim.Sessions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fdbproxy_2fdbproxy_2eproto;
};
// -------------------------------------------------------------------

class UserIdAndGroupId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserIdAndGroupId) */ {
 public:
  inline UserIdAndGroupId() : UserIdAndGroupId(nullptr) {}
  ~UserIdAndGroupId() override;
  explicit constexpr UserIdAndGroupId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIdAndGroupId(const UserIdAndGroupId& from);
  UserIdAndGroupId(UserIdAndGroupId&& from) noexcept
    : UserIdAndGroupId() {
    *this = ::std::move(from);
  }

  inline UserIdAndGroupId& operator=(const UserIdAndGroupId& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIdAndGroupId& operator=(UserIdAndGroupId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIdAndGroupId& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIdAndGroupId* internal_default_instance() {
    return reinterpret_cast<const UserIdAndGroupId*>(
               &_UserIdAndGroupId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserIdAndGroupId& a, UserIdAndGroupId& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIdAndGroupId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIdAndGroupId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserIdAndGroupId* New() const final {
    return new UserIdAndGroupId();
  }

  UserIdAndGroupId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserIdAndGroupId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIdAndGroupId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserIdAndGroupId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIdAndGroupId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserIdAndGroupId";
  }
  protected:
  explicit UserIdAndGroupId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kMsgCountFieldNumber = 3,
  };
  // int64 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 group_id = 2;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_count = 3;
  void clear_msg_count();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_count() const;
  void set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_count() const;
  void _internal_set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserIdAndGroupId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fdbproxy_2fdbproxy_2eproto;
};
// -------------------------------------------------------------------

class PairUserId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.PairUserId) */ {
 public:
  inline PairUserId() : PairUserId(nullptr) {}
  ~PairUserId() override;
  explicit constexpr PairUserId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PairUserId(const PairUserId& from);
  PairUserId(PairUserId&& from) noexcept
    : PairUserId() {
    *this = ::std::move(from);
  }

  inline PairUserId& operator=(const PairUserId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairUserId& operator=(PairUserId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PairUserId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PairUserId* internal_default_instance() {
    return reinterpret_cast<const PairUserId*>(
               &_PairUserId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PairUserId& a, PairUserId& b) {
    a.Swap(&b);
  }
  inline void Swap(PairUserId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairUserId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairUserId* New() const final {
    return new PairUserId();
  }

  PairUserId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairUserId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PairUserId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PairUserId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairUserId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.PairUserId";
  }
  protected:
  explicit PairUserId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPeerIdFieldNumber = 2,
    kMsgCountFieldNumber = 3,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 peer_id = 2;
  void clear_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int64 peer_id() const;
  void set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peer_id() const;
  void _internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 msg_count = 3;
  void clear_msg_count();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_count() const;
  void set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_count() const;
  void _internal_set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.PairUserId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fdbproxy_2fdbproxy_2eproto;
};
// -------------------------------------------------------------------

class PairMsgId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.PairMsgId) */ {
 public:
  inline PairMsgId() : PairMsgId(nullptr) {}
  ~PairMsgId() override;
  explicit constexpr PairMsgId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PairMsgId(const PairMsgId& from);
  PairMsgId(PairMsgId&& from) noexcept
    : PairMsgId() {
    *this = ::std::move(from);
  }

  inline PairMsgId& operator=(const PairMsgId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairMsgId& operator=(PairMsgId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PairMsgId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PairMsgId* internal_default_instance() {
    return reinterpret_cast<const PairMsgId*>(
               &_PairMsgId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PairMsgId& a, PairMsgId& b) {
    a.Swap(&b);
  }
  inline void Swap(PairMsgId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairMsgId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairMsgId* New() const final {
    return new PairMsgId();
  }

  PairMsgId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairMsgId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PairMsgId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PairMsgId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairMsgId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.PairMsgId";
  }
  protected:
  explicit PairMsgId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStartMsgIdFieldNumber = 2,
    kEndMsgIdFieldNumber = 3,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_msg_id = 2;
  void clear_start_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id() const;
  void set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_msg_id() const;
  void _internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_msg_id = 3;
  void clear_end_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 end_msg_id() const;
  void set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_msg_id() const;
  void _internal_set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.PairMsgId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fdbproxy_2fdbproxy_2eproto;
};
// ===================================================================

class DbProxyService_Stub;

class DbProxyService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DbProxyService() {};
 public:
  virtual ~DbProxyService();

  typedef DbProxyService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::Ping* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  virtual void AuthAndSaveSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::SigninData* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  virtual void ClearSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  virtual void SavePrivateMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::NewPrivateMsg* request,
                       ::oceanim::Reply* response,
                       ::google::protobuf::Closure* done);
  virtual void SaveGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::NewGroupMsg* request,
                       ::oceanim::Reply* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLastGroupMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserIdAndGroupId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPrivateMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::PairUserId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::PairMsgId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLastMsgId(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::MsgId* response,
                       ::google::protobuf::Closure* done);
  virtual void SetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserLastSendData* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::UserLastSendData* response,
                       ::google::protobuf::Closure* done);
  virtual void GetSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserIds* request,
                       ::oceanim::Sessions* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::MsgIdRange* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::UserInfos* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::GroupInfos* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::GroupId* request,
                       ::oceanim::UserInfos* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbProxyService);
};

class DbProxyService_Stub : public DbProxyService {
 public:
  DbProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DbProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DbProxyService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DbProxyService ------------------------------------------

  void Test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::Ping* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  void AuthAndSaveSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::SigninData* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  void ClearSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  void SavePrivateMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::NewPrivateMsg* request,
                       ::oceanim::Reply* response,
                       ::google::protobuf::Closure* done);
  void SaveGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::NewGroupMsg* request,
                       ::oceanim::Reply* response,
                       ::google::protobuf::Closure* done);
  void GetLastGroupMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserIdAndGroupId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  void GetPrivateMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::PairUserId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  void GetUserMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::PairMsgId* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  void GetLastMsgId(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::MsgId* response,
                       ::google::protobuf::Closure* done);
  void SetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserLastSendData* request,
                       ::oceanim::Pong* response,
                       ::google::protobuf::Closure* done);
  void GetUserLastSendData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::UserLastSendData* response,
                       ::google::protobuf::Closure* done);
  void GetSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserIds* request,
                       ::oceanim::Sessions* response,
                       ::google::protobuf::Closure* done);
  void GetMsgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::MsgIdRange* request,
                       ::oceanim::Msgs* response,
                       ::google::protobuf::Closure* done);
  void GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::UserInfos* response,
                       ::google::protobuf::Closure* done);
  void GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::UserId* request,
                       ::oceanim::GroupInfos* response,
                       ::google::protobuf::Closure* done);
  void GetGroupMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::GroupId* request,
                       ::oceanim::UserInfos* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbProxyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// bool has_session = 1;
inline void Session::clear_has_session() {
  has_session_ = false;
}
inline bool Session::_internal_has_session() const {
  return has_session_;
}
inline bool Session::has_session() const {
  // @@protoc_insertion_point(field_get:oceanim.Session.has_session)
  return _internal_has_session();
}
inline void Session::_internal_set_has_session(bool value) {
  
  has_session_ = value;
}
inline void Session::set_has_session(bool value) {
  _internal_set_has_session(value);
  // @@protoc_insertion_point(field_set:oceanim.Session.has_session)
}

// int64 user_id = 2;
inline void Session::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Session::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Session::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.Session.user_id)
  return _internal_user_id();
}
inline void Session::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void Session::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.Session.user_id)
}

// string addr = 3;
inline void Session::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& Session::addr() const {
  // @@protoc_insertion_point(field_get:oceanim.Session.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:oceanim.Session.addr)
}
inline std::string* Session::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:oceanim.Session.addr)
  return _s;
}
inline const std::string& Session::_internal_addr() const {
  return addr_.Get();
}
inline void Session::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Session::release_addr() {
  // @@protoc_insertion_point(field_release:oceanim.Session.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Session::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:oceanim.Session.addr)
}

// -------------------------------------------------------------------

// Sessions

// repeated .oceanim.Session sessions = 1;
inline int Sessions::_internal_sessions_size() const {
  return sessions_.size();
}
inline int Sessions::sessions_size() const {
  return _internal_sessions_size();
}
inline void Sessions::clear_sessions() {
  sessions_.Clear();
}
inline ::oceanim::Session* Sessions::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.Sessions.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Session >*
Sessions::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.Sessions.sessions)
  return &sessions_;
}
inline const ::oceanim::Session& Sessions::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::oceanim::Session& Sessions::sessions(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.Sessions.sessions)
  return _internal_sessions(index);
}
inline ::oceanim::Session* Sessions::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::oceanim::Session* Sessions::add_sessions() {
  ::oceanim::Session* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:oceanim.Sessions.sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::Session >&
Sessions::sessions() const {
  // @@protoc_insertion_point(field_list:oceanim.Sessions.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// UserIdAndGroupId

// int64 msg_id = 1;
inline void UserIdAndGroupId::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIdAndGroupId::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIdAndGroupId::msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserIdAndGroupId.msg_id)
  return _internal_msg_id();
}
inline void UserIdAndGroupId::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_ = value;
}
inline void UserIdAndGroupId::set_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserIdAndGroupId.msg_id)
}

// int64 group_id = 2;
inline void UserIdAndGroupId::clear_group_id() {
  group_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIdAndGroupId::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserIdAndGroupId::group_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserIdAndGroupId.group_id)
  return _internal_group_id();
}
inline void UserIdAndGroupId::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void UserIdAndGroupId::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserIdAndGroupId.group_id)
}

// int32 msg_count = 3;
inline void UserIdAndGroupId::clear_msg_count() {
  msg_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserIdAndGroupId::_internal_msg_count() const {
  return msg_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserIdAndGroupId::msg_count() const {
  // @@protoc_insertion_point(field_get:oceanim.UserIdAndGroupId.msg_count)
  return _internal_msg_count();
}
inline void UserIdAndGroupId::_internal_set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_count_ = value;
}
inline void UserIdAndGroupId::set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:oceanim.UserIdAndGroupId.msg_count)
}

// -------------------------------------------------------------------

// PairUserId

// int64 user_id = 1;
inline void PairUserId::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairUserId::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairUserId::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.PairUserId.user_id)
  return _internal_user_id();
}
inline void PairUserId::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void PairUserId::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.PairUserId.user_id)
}

// int64 peer_id = 2;
inline void PairUserId::clear_peer_id() {
  peer_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairUserId::_internal_peer_id() const {
  return peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairUserId::peer_id() const {
  // @@protoc_insertion_point(field_get:oceanim.PairUserId.peer_id)
  return _internal_peer_id();
}
inline void PairUserId::_internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  peer_id_ = value;
}
inline void PairUserId::set_peer_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:oceanim.PairUserId.peer_id)
}

// int32 msg_count = 3;
inline void PairUserId::clear_msg_count() {
  msg_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PairUserId::_internal_msg_count() const {
  return msg_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PairUserId::msg_count() const {
  // @@protoc_insertion_point(field_get:oceanim.PairUserId.msg_count)
  return _internal_msg_count();
}
inline void PairUserId::_internal_set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_count_ = value;
}
inline void PairUserId::set_msg_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:oceanim.PairUserId.msg_count)
}

// -------------------------------------------------------------------

// PairMsgId

// int64 user_id = 1;
inline void PairMsgId::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.PairMsgId.user_id)
  return _internal_user_id();
}
inline void PairMsgId::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void PairMsgId::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.PairMsgId.user_id)
}

// int64 start_msg_id = 2;
inline void PairMsgId::clear_start_msg_id() {
  start_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::_internal_start_msg_id() const {
  return start_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::start_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.PairMsgId.start_msg_id)
  return _internal_start_msg_id();
}
inline void PairMsgId::_internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_msg_id_ = value;
}
inline void PairMsgId::set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.PairMsgId.start_msg_id)
}

// int64 end_msg_id = 3;
inline void PairMsgId::clear_end_msg_id() {
  end_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::_internal_end_msg_id() const {
  return end_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairMsgId::end_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.PairMsgId.end_msg_id)
  return _internal_end_msg_id();
}
inline void PairMsgId::_internal_set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_msg_id_ = value;
}
inline void PairMsgId::set_end_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.PairMsgId.end_msg_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oceanim

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fdbproxy_2fdbproxy_2eproto
