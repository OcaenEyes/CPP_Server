// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idgen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_idgen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_idgen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_idgen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_idgen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idgen_2eproto;
namespace oceanim {
class MsgIdReply;
struct MsgIdReplyDefaultTypeInternal;
extern MsgIdReplyDefaultTypeInternal _MsgIdReply_default_instance_;
class MsgIdRequest;
struct MsgIdRequestDefaultTypeInternal;
extern MsgIdRequestDefaultTypeInternal _MsgIdRequest_default_instance_;
class MsgIds;
struct MsgIdsDefaultTypeInternal;
extern MsgIdsDefaultTypeInternal _MsgIds_default_instance_;
class UserAndIdNum;
struct UserAndIdNumDefaultTypeInternal;
extern UserAndIdNumDefaultTypeInternal _UserAndIdNum_default_instance_;
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
template<> ::oceanim::MsgIdReply* Arena::CreateMaybeMessage<::oceanim::MsgIdReply>(Arena*);
template<> ::oceanim::MsgIdRequest* Arena::CreateMaybeMessage<::oceanim::MsgIdRequest>(Arena*);
template<> ::oceanim::MsgIds* Arena::CreateMaybeMessage<::oceanim::MsgIds>(Arena*);
template<> ::oceanim::UserAndIdNum* Arena::CreateMaybeMessage<::oceanim::UserAndIdNum>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oceanim {

// ===================================================================

class UserAndIdNum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.UserAndIdNum) */ {
 public:
  inline UserAndIdNum() : UserAndIdNum(nullptr) {}
  ~UserAndIdNum() override;
  explicit constexpr UserAndIdNum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAndIdNum(const UserAndIdNum& from);
  UserAndIdNum(UserAndIdNum&& from) noexcept
    : UserAndIdNum() {
    *this = ::std::move(from);
  }

  inline UserAndIdNum& operator=(const UserAndIdNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAndIdNum& operator=(UserAndIdNum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAndIdNum& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAndIdNum* internal_default_instance() {
    return reinterpret_cast<const UserAndIdNum*>(
               &_UserAndIdNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserAndIdNum& a, UserAndIdNum& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAndIdNum* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAndIdNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAndIdNum* New() const final {
    return new UserAndIdNum();
  }

  UserAndIdNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAndIdNum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserAndIdNum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserAndIdNum& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAndIdNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.UserAndIdNum";
  }
  protected:
  explicit UserAndIdNum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNeedMsgidNumFieldNumber = 2,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 need_msgid_num = 2;
  void clear_need_msgid_num();
  ::PROTOBUF_NAMESPACE_ID::int64 need_msgid_num() const;
  void set_need_msgid_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_need_msgid_num() const;
  void _internal_set_need_msgid_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.UserAndIdNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 need_msgid_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idgen_2eproto;
};
// -------------------------------------------------------------------

class MsgIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgIdRequest) */ {
 public:
  inline MsgIdRequest() : MsgIdRequest(nullptr) {}
  ~MsgIdRequest() override;
  explicit constexpr MsgIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIdRequest(const MsgIdRequest& from);
  MsgIdRequest(MsgIdRequest&& from) noexcept
    : MsgIdRequest() {
    *this = ::std::move(from);
  }

  inline MsgIdRequest& operator=(const MsgIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIdRequest& operator=(MsgIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIdRequest* internal_default_instance() {
    return reinterpret_cast<const MsgIdRequest*>(
               &_MsgIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgIdRequest& a, MsgIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgIdRequest* New() const final {
    return new MsgIdRequest();
  }

  MsgIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgIdRequest";
  }
  protected:
  explicit MsgIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated .oceanim.UserAndIdNum user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  ::oceanim::UserAndIdNum* mutable_user_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndIdNum >*
      mutable_user_ids();
  private:
  const ::oceanim::UserAndIdNum& _internal_user_ids(int index) const;
  ::oceanim::UserAndIdNum* _internal_add_user_ids();
  public:
  const ::oceanim::UserAndIdNum& user_ids(int index) const;
  ::oceanim::UserAndIdNum* add_user_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndIdNum >&
      user_ids() const;

  // @@protoc_insertion_point(class_scope:oceanim.MsgIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndIdNum > user_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idgen_2eproto;
};
// -------------------------------------------------------------------

class MsgIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgIds) */ {
 public:
  inline MsgIds() : MsgIds(nullptr) {}
  ~MsgIds() override;
  explicit constexpr MsgIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIds(const MsgIds& from);
  MsgIds(MsgIds&& from) noexcept
    : MsgIds() {
    *this = ::std::move(from);
  }

  inline MsgIds& operator=(const MsgIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIds& operator=(MsgIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIds* internal_default_instance() {
    return reinterpret_cast<const MsgIds*>(
               &_MsgIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgIds& a, MsgIds& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgIds* New() const final {
    return new MsgIds();
  }

  MsgIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgIds";
  }
  protected:
  explicit MsgIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStartMsgIdFieldNumber = 2,
    kMsgIdNumFieldNumber = 3,
  };
  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_msg_id = 2;
  void clear_start_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id() const;
  void set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_msg_id() const;
  void _internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 msg_id_num = 3;
  void clear_msg_id_num();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_num() const;
  void set_msg_id_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_id_num() const;
  void _internal_set_msg_id_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:oceanim.MsgIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_id_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idgen_2eproto;
};
// -------------------------------------------------------------------

class MsgIdReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oceanim.MsgIdReply) */ {
 public:
  inline MsgIdReply() : MsgIdReply(nullptr) {}
  ~MsgIdReply() override;
  explicit constexpr MsgIdReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgIdReply(const MsgIdReply& from);
  MsgIdReply(MsgIdReply&& from) noexcept
    : MsgIdReply() {
    *this = ::std::move(from);
  }

  inline MsgIdReply& operator=(const MsgIdReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgIdReply& operator=(MsgIdReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgIdReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgIdReply* internal_default_instance() {
    return reinterpret_cast<const MsgIdReply*>(
               &_MsgIdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgIdReply& a, MsgIdReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgIdReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgIdReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgIdReply* New() const final {
    return new MsgIdReply();
  }

  MsgIdReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgIdReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgIdReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgIdReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgIdReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oceanim.MsgIdReply";
  }
  protected:
  explicit MsgIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdsFieldNumber = 1,
  };
  // repeated .oceanim.MsgIds msg_ids = 1;
  int msg_ids_size() const;
  private:
  int _internal_msg_ids_size() const;
  public:
  void clear_msg_ids();
  ::oceanim::MsgIds* mutable_msg_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::MsgIds >*
      mutable_msg_ids();
  private:
  const ::oceanim::MsgIds& _internal_msg_ids(int index) const;
  ::oceanim::MsgIds* _internal_add_msg_ids();
  public:
  const ::oceanim::MsgIds& msg_ids(int index) const;
  ::oceanim::MsgIds* add_msg_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::MsgIds >&
      msg_ids() const;

  // @@protoc_insertion_point(class_scope:oceanim.MsgIdReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::MsgIds > msg_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idgen_2eproto;
};
// ===================================================================

class IdGenService_Stub;

class IdGenService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline IdGenService() {};
 public:
  virtual ~IdGenService();

  typedef IdGenService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void IdGenerate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::MsgIdRequest* request,
                       ::oceanim::MsgIdReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IdGenService);
};

class IdGenService_Stub : public IdGenService {
 public:
  IdGenService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  IdGenService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~IdGenService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements IdGenService ------------------------------------------

  void IdGenerate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::oceanim::MsgIdRequest* request,
                       ::oceanim::MsgIdReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IdGenService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAndIdNum

// int64 user_id = 1;
inline void UserAndIdNum::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndIdNum::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndIdNum::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.UserAndIdNum.user_id)
  return _internal_user_id();
}
inline void UserAndIdNum::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserAndIdNum::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.UserAndIdNum.user_id)
}

// int64 need_msgid_num = 2;
inline void UserAndIdNum::clear_need_msgid_num() {
  need_msgid_num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndIdNum::_internal_need_msgid_num() const {
  return need_msgid_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserAndIdNum::need_msgid_num() const {
  // @@protoc_insertion_point(field_get:oceanim.UserAndIdNum.need_msgid_num)
  return _internal_need_msgid_num();
}
inline void UserAndIdNum::_internal_set_need_msgid_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  need_msgid_num_ = value;
}
inline void UserAndIdNum::set_need_msgid_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_need_msgid_num(value);
  // @@protoc_insertion_point(field_set:oceanim.UserAndIdNum.need_msgid_num)
}

// -------------------------------------------------------------------

// MsgIdRequest

// repeated .oceanim.UserAndIdNum user_ids = 1;
inline int MsgIdRequest::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int MsgIdRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void MsgIdRequest::clear_user_ids() {
  user_ids_.Clear();
}
inline ::oceanim::UserAndIdNum* MsgIdRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.MsgIdRequest.user_ids)
  return user_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndIdNum >*
MsgIdRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.MsgIdRequest.user_ids)
  return &user_ids_;
}
inline const ::oceanim::UserAndIdNum& MsgIdRequest::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const ::oceanim::UserAndIdNum& MsgIdRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIdRequest.user_ids)
  return _internal_user_ids(index);
}
inline ::oceanim::UserAndIdNum* MsgIdRequest::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline ::oceanim::UserAndIdNum* MsgIdRequest::add_user_ids() {
  ::oceanim::UserAndIdNum* _add = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add:oceanim.MsgIdRequest.user_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::UserAndIdNum >&
MsgIdRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:oceanim.MsgIdRequest.user_ids)
  return user_ids_;
}

// -------------------------------------------------------------------

// MsgIds

// int64 user_id = 1;
inline void MsgIds::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::user_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIds.user_id)
  return _internal_user_id();
}
inline void MsgIds::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void MsgIds::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIds.user_id)
}

// int64 start_msg_id = 2;
inline void MsgIds::clear_start_msg_id() {
  start_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::_internal_start_msg_id() const {
  return start_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::start_msg_id() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIds.start_msg_id)
  return _internal_start_msg_id();
}
inline void MsgIds::_internal_set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_msg_id_ = value;
}
inline void MsgIds::set_start_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_msg_id(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIds.start_msg_id)
}

// int64 msg_id_num = 3;
inline void MsgIds::clear_msg_id_num() {
  msg_id_num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::_internal_msg_id_num() const {
  return msg_id_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgIds::msg_id_num() const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIds.msg_id_num)
  return _internal_msg_id_num();
}
inline void MsgIds::_internal_set_msg_id_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_id_num_ = value;
}
inline void MsgIds::set_msg_id_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_id_num(value);
  // @@protoc_insertion_point(field_set:oceanim.MsgIds.msg_id_num)
}

// -------------------------------------------------------------------

// MsgIdReply

// repeated .oceanim.MsgIds msg_ids = 1;
inline int MsgIdReply::_internal_msg_ids_size() const {
  return msg_ids_.size();
}
inline int MsgIdReply::msg_ids_size() const {
  return _internal_msg_ids_size();
}
inline void MsgIdReply::clear_msg_ids() {
  msg_ids_.Clear();
}
inline ::oceanim::MsgIds* MsgIdReply::mutable_msg_ids(int index) {
  // @@protoc_insertion_point(field_mutable:oceanim.MsgIdReply.msg_ids)
  return msg_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::MsgIds >*
MsgIdReply::mutable_msg_ids() {
  // @@protoc_insertion_point(field_mutable_list:oceanim.MsgIdReply.msg_ids)
  return &msg_ids_;
}
inline const ::oceanim::MsgIds& MsgIdReply::_internal_msg_ids(int index) const {
  return msg_ids_.Get(index);
}
inline const ::oceanim::MsgIds& MsgIdReply::msg_ids(int index) const {
  // @@protoc_insertion_point(field_get:oceanim.MsgIdReply.msg_ids)
  return _internal_msg_ids(index);
}
inline ::oceanim::MsgIds* MsgIdReply::_internal_add_msg_ids() {
  return msg_ids_.Add();
}
inline ::oceanim::MsgIds* MsgIdReply::add_msg_ids() {
  ::oceanim::MsgIds* _add = _internal_add_msg_ids();
  // @@protoc_insertion_point(field_add:oceanim.MsgIdReply.msg_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oceanim::MsgIds >&
MsgIdReply::msg_ids() const {
  // @@protoc_insertion_point(field_list:oceanim.MsgIdReply.msg_ids)
  return msg_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oceanim

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_idgen_2eproto
