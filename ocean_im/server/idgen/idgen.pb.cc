// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idgen.proto

#include "idgen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace oceanim {
constexpr UserAndIdNum::UserAndIdNum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0})
  , need_msgid_num_(int64_t{0}){}
struct UserAndIdNumDefaultTypeInternal {
  constexpr UserAndIdNumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserAndIdNumDefaultTypeInternal() {}
  union {
    UserAndIdNum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserAndIdNumDefaultTypeInternal _UserAndIdNum_default_instance_;
constexpr MsgIdRequest::MsgIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_(){}
struct MsgIdRequestDefaultTypeInternal {
  constexpr MsgIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgIdRequestDefaultTypeInternal() {}
  union {
    MsgIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgIdRequestDefaultTypeInternal _MsgIdRequest_default_instance_;
constexpr MsgIds::MsgIds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0})
  , start_msg_id_(int64_t{0})
  , msg_id_num_(int64_t{0}){}
struct MsgIdsDefaultTypeInternal {
  constexpr MsgIdsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgIdsDefaultTypeInternal() {}
  union {
    MsgIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgIdsDefaultTypeInternal _MsgIds_default_instance_;
constexpr MsgIdReply::MsgIdReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_ids_(){}
struct MsgIdReplyDefaultTypeInternal {
  constexpr MsgIdReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgIdReplyDefaultTypeInternal() {}
  union {
    MsgIdReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgIdReplyDefaultTypeInternal _MsgIdReply_default_instance_;
}  // namespace oceanim
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_idgen_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_idgen_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_idgen_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_idgen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::UserAndIdNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::UserAndIdNum, user_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::UserAndIdNum, need_msgid_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIdRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIds, user_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIds, start_msg_id_),
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIds, msg_id_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::oceanim::MsgIdReply, msg_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::oceanim::UserAndIdNum)},
  { 8, -1, -1, sizeof(::oceanim::MsgIdRequest)},
  { 15, -1, -1, sizeof(::oceanim::MsgIds)},
  { 24, -1, -1, sizeof(::oceanim::MsgIdReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_UserAndIdNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_MsgIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_MsgIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oceanim::_MsgIdReply_default_instance_),
};

const char descriptor_table_protodef_idgen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013idgen.proto\022\007oceanim\"7\n\014UserAndIdNum\022\017"
  "\n\007user_id\030\001 \001(\003\022\026\n\016need_msgid_num\030\002 \001(\003\""
  "7\n\014MsgIdRequest\022\'\n\010user_ids\030\001 \003(\0132\025.ocea"
  "nim.UserAndIdNum\"C\n\006MsgIds\022\017\n\007user_id\030\001 "
  "\001(\003\022\024\n\014start_msg_id\030\002 \001(\003\022\022\n\nmsg_id_num\030"
  "\003 \001(\003\".\n\nMsgIdReply\022 \n\007msg_ids\030\001 \003(\0132\017.o"
  "ceanim.MsgIds2H\n\014IdGenService\0228\n\nIdGener"
  "ate\022\025.oceanim.MsgIdRequest\032\023.oceanim.Msg"
  "IdReplyB\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_idgen_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idgen_2eproto = {
  false, false, 340, descriptor_table_protodef_idgen_2eproto, "idgen.proto", 
  &descriptor_table_idgen_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_idgen_2eproto::offsets,
  file_level_metadata_idgen_2eproto, file_level_enum_descriptors_idgen_2eproto, file_level_service_descriptors_idgen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_idgen_2eproto_getter() {
  return &descriptor_table_idgen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_idgen_2eproto(&descriptor_table_idgen_2eproto);
namespace oceanim {

// ===================================================================

class UserAndIdNum::_Internal {
 public:
};

UserAndIdNum::UserAndIdNum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.UserAndIdNum)
}
UserAndIdNum::UserAndIdNum(const UserAndIdNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_msgid_num_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(need_msgid_num_));
  // @@protoc_insertion_point(copy_constructor:oceanim.UserAndIdNum)
}

void UserAndIdNum::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&need_msgid_num_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(need_msgid_num_));
}

UserAndIdNum::~UserAndIdNum() {
  // @@protoc_insertion_point(destructor:oceanim.UserAndIdNum)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserAndIdNum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserAndIdNum::ArenaDtor(void* object) {
  UserAndIdNum* _this = reinterpret_cast< UserAndIdNum* >(object);
  (void)_this;
}
void UserAndIdNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAndIdNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAndIdNum::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.UserAndIdNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_msgid_num_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(need_msgid_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAndIdNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 need_msgid_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          need_msgid_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAndIdNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.UserAndIdNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int64 need_msgid_num = 2;
  if (this->_internal_need_msgid_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_need_msgid_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.UserAndIdNum)
  return target;
}

size_t UserAndIdNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.UserAndIdNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 need_msgid_num = 2;
  if (this->_internal_need_msgid_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_need_msgid_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAndIdNum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserAndIdNum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAndIdNum::GetClassData() const { return &_class_data_; }

void UserAndIdNum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserAndIdNum *>(to)->MergeFrom(
      static_cast<const UserAndIdNum &>(from));
}


void UserAndIdNum::MergeFrom(const UserAndIdNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.UserAndIdNum)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_need_msgid_num() != 0) {
    _internal_set_need_msgid_num(from._internal_need_msgid_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAndIdNum::CopyFrom(const UserAndIdNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.UserAndIdNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAndIdNum::IsInitialized() const {
  return true;
}

void UserAndIdNum::InternalSwap(UserAndIdNum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAndIdNum, need_msgid_num_)
      + sizeof(UserAndIdNum::need_msgid_num_)
      - PROTOBUF_FIELD_OFFSET(UserAndIdNum, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAndIdNum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_idgen_2eproto_getter, &descriptor_table_idgen_2eproto_once,
      file_level_metadata_idgen_2eproto[0]);
}

// ===================================================================

class MsgIdRequest::_Internal {
 public:
};

MsgIdRequest::MsgIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.MsgIdRequest)
}
MsgIdRequest::MsgIdRequest(const MsgIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:oceanim.MsgIdRequest)
}

void MsgIdRequest::SharedCtor() {
}

MsgIdRequest::~MsgIdRequest() {
  // @@protoc_insertion_point(destructor:oceanim.MsgIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgIdRequest::ArenaDtor(void* object) {
  MsgIdRequest* _this = reinterpret_cast< MsgIdRequest* >(object);
  (void)_this;
}
void MsgIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.MsgIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .oceanim.UserAndIdNum user_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.MsgIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oceanim.UserAndIdNum user_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.MsgIdRequest)
  return target;
}

size_t MsgIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.MsgIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oceanim.UserAndIdNum user_ids = 1;
  total_size += 1UL * this->_internal_user_ids_size();
  for (const auto& msg : this->user_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIdRequest::GetClassData() const { return &_class_data_; }

void MsgIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgIdRequest *>(to)->MergeFrom(
      static_cast<const MsgIdRequest &>(from));
}


void MsgIdRequest::MergeFrom(const MsgIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.MsgIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIdRequest::CopyFrom(const MsgIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.MsgIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIdRequest::IsInitialized() const {
  return true;
}

void MsgIdRequest::InternalSwap(MsgIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_idgen_2eproto_getter, &descriptor_table_idgen_2eproto_once,
      file_level_metadata_idgen_2eproto[1]);
}

// ===================================================================

class MsgIds::_Internal {
 public:
};

MsgIds::MsgIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.MsgIds)
}
MsgIds::MsgIds(const MsgIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_num_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_num_));
  // @@protoc_insertion_point(copy_constructor:oceanim.MsgIds)
}

void MsgIds::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_id_num_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_num_));
}

MsgIds::~MsgIds() {
  // @@protoc_insertion_point(destructor:oceanim.MsgIds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgIds::ArenaDtor(void* object) {
  MsgIds* _this = reinterpret_cast< MsgIds* >(object);
  (void)_this;
}
void MsgIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgIds::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.MsgIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_num_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_id_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.MsgIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int64 start_msg_id = 2;
  if (this->_internal_start_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_msg_id(), target);
  }

  // int64 msg_id_num = 3;
  if (this->_internal_msg_id_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_msg_id_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.MsgIds)
  return target;
}

size_t MsgIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.MsgIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // int64 start_msg_id = 2;
  if (this->_internal_start_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_msg_id());
  }

  // int64 msg_id_num = 3;
  if (this->_internal_msg_id_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIds::GetClassData() const { return &_class_data_; }

void MsgIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgIds *>(to)->MergeFrom(
      static_cast<const MsgIds &>(from));
}


void MsgIds::MergeFrom(const MsgIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.MsgIds)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_start_msg_id() != 0) {
    _internal_set_start_msg_id(from._internal_start_msg_id());
  }
  if (from._internal_msg_id_num() != 0) {
    _internal_set_msg_id_num(from._internal_msg_id_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIds::CopyFrom(const MsgIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.MsgIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIds::IsInitialized() const {
  return true;
}

void MsgIds::InternalSwap(MsgIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgIds, msg_id_num_)
      + sizeof(MsgIds::msg_id_num_)
      - PROTOBUF_FIELD_OFFSET(MsgIds, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_idgen_2eproto_getter, &descriptor_table_idgen_2eproto_once,
      file_level_metadata_idgen_2eproto[2]);
}

// ===================================================================

class MsgIdReply::_Internal {
 public:
};

MsgIdReply::MsgIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:oceanim.MsgIdReply)
}
MsgIdReply::MsgIdReply(const MsgIdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_ids_(from.msg_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:oceanim.MsgIdReply)
}

void MsgIdReply::SharedCtor() {
}

MsgIdReply::~MsgIdReply() {
  // @@protoc_insertion_point(destructor:oceanim.MsgIdReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgIdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgIdReply::ArenaDtor(void* object) {
  MsgIdReply* _this = reinterpret_cast< MsgIdReply* >(object);
  (void)_this;
}
void MsgIdReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgIdReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgIdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:oceanim.MsgIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgIdReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .oceanim.MsgIds msg_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgIdReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oceanim.MsgIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .oceanim.MsgIds msg_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oceanim.MsgIdReply)
  return target;
}

size_t MsgIdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oceanim.MsgIdReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oceanim.MsgIds msg_ids = 1;
  total_size += 1UL * this->_internal_msg_ids_size();
  for (const auto& msg : this->msg_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgIdReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgIdReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgIdReply::GetClassData() const { return &_class_data_; }

void MsgIdReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgIdReply *>(to)->MergeFrom(
      static_cast<const MsgIdReply &>(from));
}


void MsgIdReply::MergeFrom(const MsgIdReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oceanim.MsgIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_ids_.MergeFrom(from.msg_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIdReply::CopyFrom(const MsgIdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oceanim.MsgIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIdReply::IsInitialized() const {
  return true;
}

void MsgIdReply::InternalSwap(MsgIdReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_ids_.InternalSwap(&other->msg_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgIdReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_idgen_2eproto_getter, &descriptor_table_idgen_2eproto_once,
      file_level_metadata_idgen_2eproto[3]);
}

// ===================================================================

IdGenService::~IdGenService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* IdGenService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_idgen_2eproto);
  return file_level_service_descriptors_idgen_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* IdGenService::GetDescriptor() {
  return descriptor();
}

void IdGenService::IdGenerate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::oceanim::MsgIdRequest*,
                         ::oceanim::MsgIdReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IdGenerate() not implemented.");
  done->Run();
}

void IdGenService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_idgen_2eproto[0]);
  switch(method->index()) {
    case 0:
      IdGenerate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::oceanim::MsgIdRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::oceanim::MsgIdReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& IdGenService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::MsgIdRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& IdGenService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::oceanim::MsgIdReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IdGenService_Stub::IdGenService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IdGenService_Stub::IdGenService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
IdGenService_Stub::~IdGenService_Stub() {
  if (owns_channel_) delete channel_;
}

void IdGenService_Stub::IdGenerate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::oceanim::MsgIdRequest* request,
                              ::oceanim::MsgIdReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace oceanim
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oceanim::UserAndIdNum* Arena::CreateMaybeMessage< ::oceanim::UserAndIdNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::UserAndIdNum >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::MsgIdRequest* Arena::CreateMaybeMessage< ::oceanim::MsgIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::MsgIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::MsgIds* Arena::CreateMaybeMessage< ::oceanim::MsgIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::MsgIds >(arena);
}
template<> PROTOBUF_NOINLINE ::oceanim::MsgIdReply* Arena::CreateMaybeMessage< ::oceanim::MsgIdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oceanim::MsgIdReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
